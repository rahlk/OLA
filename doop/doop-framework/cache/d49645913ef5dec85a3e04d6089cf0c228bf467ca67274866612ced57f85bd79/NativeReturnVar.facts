<java.lang.UNIXProcess: int waitForProcessExit(int)>/@native-return	<java.lang.UNIXProcess: int waitForProcessExit(int)>
<java.lang.UNIXProcess: int forkAndExec(int,byte[],byte[],byte[],int,byte[],int,byte[],int[],boolean)>/@native-return	<java.lang.UNIXProcess: int forkAndExec(int,byte[],byte[],byte[],int,byte[],int,byte[],int[],boolean)>
<java.lang.SecurityManager: java.lang.Class[] getClassContext()>/@native-return	<java.lang.SecurityManager: java.lang.Class[] getClassContext()>
<java.lang.SecurityManager: java.lang.ClassLoader currentClassLoader0()>/@native-return	<java.lang.SecurityManager: java.lang.ClassLoader currentClassLoader0()>
<java.lang.SecurityManager: int classDepth(java.lang.String)>/@native-return	<java.lang.SecurityManager: int classDepth(java.lang.String)>
<java.lang.SecurityManager: int classLoaderDepth0()>/@native-return	<java.lang.SecurityManager: int classLoaderDepth0()>
<java.lang.SecurityManager: java.lang.Class currentLoadedClass0()>/@native-return	<java.lang.SecurityManager: java.lang.Class currentLoadedClass0()>
<sun.nio.ch.Net: boolean isIPv6Available0()>/@native-return	<sun.nio.ch.Net: boolean isIPv6Available0()>
<sun.nio.ch.Net: int isExclusiveBindAvailable()>/@native-return	<sun.nio.ch.Net: int isExclusiveBindAvailable()>
<sun.nio.ch.Net: boolean canIPv6SocketJoinIPv4Group0()>/@native-return	<sun.nio.ch.Net: boolean canIPv6SocketJoinIPv4Group0()>
<sun.nio.ch.Net: boolean canJoin6WithIPv4Group0()>/@native-return	<sun.nio.ch.Net: boolean canJoin6WithIPv4Group0()>
<sun.nio.ch.Net: int socket0(boolean,boolean,boolean,boolean)>/@native-return	<sun.nio.ch.Net: int socket0(boolean,boolean,boolean,boolean)>
<sun.nio.ch.Net: int connect0(boolean,java.io.FileDescriptor,java.net.InetAddress,int)>/@native-return	<sun.nio.ch.Net: int connect0(boolean,java.io.FileDescriptor,java.net.InetAddress,int)>
<sun.nio.ch.Net: int localPort(java.io.FileDescriptor)>/@native-return	<sun.nio.ch.Net: int localPort(java.io.FileDescriptor)>
<sun.nio.ch.Net: java.net.InetAddress localInetAddress(java.io.FileDescriptor)>/@native-return	<sun.nio.ch.Net: java.net.InetAddress localInetAddress(java.io.FileDescriptor)>
<sun.nio.ch.Net: int remotePort(java.io.FileDescriptor)>/@native-return	<sun.nio.ch.Net: int remotePort(java.io.FileDescriptor)>
<sun.nio.ch.Net: java.net.InetAddress remoteInetAddress(java.io.FileDescriptor)>/@native-return	<sun.nio.ch.Net: java.net.InetAddress remoteInetAddress(java.io.FileDescriptor)>
<sun.nio.ch.Net: int getIntOption0(java.io.FileDescriptor,boolean,int,int)>/@native-return	<sun.nio.ch.Net: int getIntOption0(java.io.FileDescriptor,boolean,int,int)>
<sun.nio.ch.Net: int poll(java.io.FileDescriptor,int,long)>/@native-return	<sun.nio.ch.Net: int poll(java.io.FileDescriptor,int,long)>
<sun.nio.ch.Net: int joinOrDrop4(boolean,java.io.FileDescriptor,int,int,int)>/@native-return	<sun.nio.ch.Net: int joinOrDrop4(boolean,java.io.FileDescriptor,int,int,int)>
<sun.nio.ch.PollArrayWrapper: int poll0(long,int,long)>/@native-return	<sun.nio.ch.PollArrayWrapper: int poll0(long,int,long)>
<sun.nio.ch.Net: int blockOrUnblock4(boolean,java.io.FileDescriptor,int,int,int)>/@native-return	<sun.nio.ch.Net: int blockOrUnblock4(boolean,java.io.FileDescriptor,int,int,int)>
<sun.nio.ch.Net: int joinOrDrop6(boolean,java.io.FileDescriptor,byte[],int,byte[])>/@native-return	<sun.nio.ch.Net: int joinOrDrop6(boolean,java.io.FileDescriptor,byte[],int,byte[])>
<sun.nio.ch.Net: int blockOrUnblock6(boolean,java.io.FileDescriptor,byte[],int,byte[])>/@native-return	<sun.nio.ch.Net: int blockOrUnblock6(boolean,java.io.FileDescriptor,byte[],int,byte[])>
<sun.nio.ch.Net: int getInterface4(java.io.FileDescriptor)>/@native-return	<sun.nio.ch.Net: int getInterface4(java.io.FileDescriptor)>
<sun.nio.ch.Net: int getInterface6(java.io.FileDescriptor)>/@native-return	<sun.nio.ch.Net: int getInterface6(java.io.FileDescriptor)>
<sun.nio.ch.Net: short pollinValue()>/@native-return	<sun.nio.ch.Net: short pollinValue()>
<sun.nio.ch.Net: short polloutValue()>/@native-return	<sun.nio.ch.Net: short polloutValue()>
<sun.nio.ch.Net: short pollerrValue()>/@native-return	<sun.nio.ch.Net: short pollerrValue()>
<sun.nio.ch.Net: short pollhupValue()>/@native-return	<sun.nio.ch.Net: short pollhupValue()>
<sun.nio.ch.Net: short pollnvalValue()>/@native-return	<sun.nio.ch.Net: short pollnvalValue()>
<sun.nio.ch.Net: short pollconnValue()>/@native-return	<sun.nio.ch.Net: short pollconnValue()>
<sun.reflect.ConstantPool: int getSize0(java.lang.Object)>/@native-return	<sun.reflect.ConstantPool: int getSize0(java.lang.Object)>
<sun.reflect.ConstantPool: java.lang.Class getClassAt0(java.lang.Object,int)>/@native-return	<sun.reflect.ConstantPool: java.lang.Class getClassAt0(java.lang.Object,int)>
<sun.reflect.ConstantPool: java.lang.Class getClassAtIfLoaded0(java.lang.Object,int)>/@native-return	<sun.reflect.ConstantPool: java.lang.Class getClassAtIfLoaded0(java.lang.Object,int)>
<sun.reflect.ConstantPool: java.lang.reflect.Member getMethodAt0(java.lang.Object,int)>/@native-return	<sun.reflect.ConstantPool: java.lang.reflect.Member getMethodAt0(java.lang.Object,int)>
<sun.reflect.ConstantPool: java.lang.reflect.Member getMethodAtIfLoaded0(java.lang.Object,int)>/@native-return	<sun.reflect.ConstantPool: java.lang.reflect.Member getMethodAtIfLoaded0(java.lang.Object,int)>
<sun.reflect.ConstantPool: java.lang.reflect.Field getFieldAt0(java.lang.Object,int)>/@native-return	<sun.reflect.ConstantPool: java.lang.reflect.Field getFieldAt0(java.lang.Object,int)>
<sun.reflect.ConstantPool: java.lang.reflect.Field getFieldAtIfLoaded0(java.lang.Object,int)>/@native-return	<sun.reflect.ConstantPool: java.lang.reflect.Field getFieldAtIfLoaded0(java.lang.Object,int)>
<sun.reflect.ConstantPool: java.lang.String[] getMemberRefInfoAt0(java.lang.Object,int)>/@native-return	<sun.reflect.ConstantPool: java.lang.String[] getMemberRefInfoAt0(java.lang.Object,int)>
<sun.reflect.ConstantPool: int getIntAt0(java.lang.Object,int)>/@native-return	<sun.reflect.ConstantPool: int getIntAt0(java.lang.Object,int)>
<sun.reflect.ConstantPool: long getLongAt0(java.lang.Object,int)>/@native-return	<sun.reflect.ConstantPool: long getLongAt0(java.lang.Object,int)>
<sun.reflect.ConstantPool: float getFloatAt0(java.lang.Object,int)>/@native-return	<sun.reflect.ConstantPool: float getFloatAt0(java.lang.Object,int)>
<sun.reflect.ConstantPool: double getDoubleAt0(java.lang.Object,int)>/@native-return	<sun.reflect.ConstantPool: double getDoubleAt0(java.lang.Object,int)>
<sun.reflect.ConstantPool: java.lang.String getStringAt0(java.lang.Object,int)>/@native-return	<sun.reflect.ConstantPool: java.lang.String getStringAt0(java.lang.Object,int)>
<sun.reflect.ConstantPool: java.lang.String getUTF8At0(java.lang.Object,int)>/@native-return	<sun.reflect.ConstantPool: java.lang.String getUTF8At0(java.lang.Object,int)>
<java.lang.reflect.Proxy: java.lang.Class defineClass0(java.lang.ClassLoader,java.lang.String,byte[],int,int)>/@native-return	<java.lang.reflect.Proxy: java.lang.Class defineClass0(java.lang.ClassLoader,java.lang.String,byte[],int,int)>
<java.net.NetworkInterface: java.net.NetworkInterface[] getAll()>/@native-return	<java.net.NetworkInterface: java.net.NetworkInterface[] getAll()>
<java.net.NetworkInterface: java.net.NetworkInterface getByName0(java.lang.String)>/@native-return	<java.net.NetworkInterface: java.net.NetworkInterface getByName0(java.lang.String)>
<java.net.NetworkInterface: java.net.NetworkInterface getByIndex0(int)>/@native-return	<java.net.NetworkInterface: java.net.NetworkInterface getByIndex0(int)>
<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress0(java.net.InetAddress)>/@native-return	<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress0(java.net.InetAddress)>
<java.net.NetworkInterface: boolean isUp0(java.lang.String,int)>/@native-return	<java.net.NetworkInterface: boolean isUp0(java.lang.String,int)>
<java.net.NetworkInterface: boolean isLoopback0(java.lang.String,int)>/@native-return	<java.net.NetworkInterface: boolean isLoopback0(java.lang.String,int)>
<java.net.NetworkInterface: boolean supportsMulticast0(java.lang.String,int)>/@native-return	<java.net.NetworkInterface: boolean supportsMulticast0(java.lang.String,int)>
<java.net.NetworkInterface: boolean isP2P0(java.lang.String,int)>/@native-return	<java.net.NetworkInterface: boolean isP2P0(java.lang.String,int)>
<java.net.NetworkInterface: byte[] getMacAddr0(byte[],java.lang.String,int)>/@native-return	<java.net.NetworkInterface: byte[] getMacAddr0(byte[],java.lang.String,int)>
<java.net.NetworkInterface: int getMTU0(java.lang.String,int)>/@native-return	<java.net.NetworkInterface: int getMTU0(java.lang.String,int)>
<sun.misc.Signal: int findSignal(java.lang.String)>/@native-return	<sun.misc.Signal: int findSignal(java.lang.String)>
<sun.misc.Signal: long handle0(int,long)>/@native-return	<sun.misc.Signal: long handle0(int,long)>
<sun.reflect.NativeMethodAccessorImpl: java.lang.Object invoke0(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>/@native-return	<sun.reflect.NativeMethodAccessorImpl: java.lang.Object invoke0(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>
<java.io.UnixFileSystem: java.lang.String canonicalize0(java.lang.String)>/@native-return	<java.io.UnixFileSystem: java.lang.String canonicalize0(java.lang.String)>
<java.io.UnixFileSystem: int getBooleanAttributes0(java.io.File)>/@native-return	<java.io.UnixFileSystem: int getBooleanAttributes0(java.io.File)>
<java.io.UnixFileSystem: boolean checkAccess(java.io.File,int)>/@native-return	<java.io.UnixFileSystem: boolean checkAccess(java.io.File,int)>
<java.io.UnixFileSystem: long getLastModifiedTime(java.io.File)>/@native-return	<java.io.UnixFileSystem: long getLastModifiedTime(java.io.File)>
<java.io.UnixFileSystem: long getLength(java.io.File)>/@native-return	<java.io.UnixFileSystem: long getLength(java.io.File)>
<java.io.UnixFileSystem: boolean setPermission(java.io.File,int,boolean,boolean)>/@native-return	<java.io.UnixFileSystem: boolean setPermission(java.io.File,int,boolean,boolean)>
<java.io.UnixFileSystem: boolean createFileExclusively(java.lang.String)>/@native-return	<java.io.UnixFileSystem: boolean createFileExclusively(java.lang.String)>
<java.io.UnixFileSystem: boolean delete0(java.io.File)>/@native-return	<java.io.UnixFileSystem: boolean delete0(java.io.File)>
<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>/@native-return	<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>
<java.io.UnixFileSystem: boolean createDirectory(java.io.File)>/@native-return	<java.io.UnixFileSystem: boolean createDirectory(java.io.File)>
<java.io.UnixFileSystem: boolean rename0(java.io.File,java.io.File)>/@native-return	<java.io.UnixFileSystem: boolean rename0(java.io.File,java.io.File)>
<java.io.UnixFileSystem: boolean setLastModifiedTime(java.io.File,long)>/@native-return	<java.io.UnixFileSystem: boolean setLastModifiedTime(java.io.File,long)>
<java.io.UnixFileSystem: boolean setReadOnly(java.io.File)>/@native-return	<java.io.UnixFileSystem: boolean setReadOnly(java.io.File)>
<java.io.UnixFileSystem: long getSpace(java.io.File,int)>/@native-return	<java.io.UnixFileSystem: long getSpace(java.io.File,int)>
<sun.nio.ch.ServerSocketChannelImpl: int accept0(java.io.FileDescriptor,java.io.FileDescriptor,java.net.InetSocketAddress[])>/@native-return	<sun.nio.ch.ServerSocketChannelImpl: int accept0(java.io.FileDescriptor,java.io.FileDescriptor,java.net.InetSocketAddress[])>
<java.net.SocketInputStream: int socketRead0(java.io.FileDescriptor,byte[],int,int,int)>/@native-return	<java.net.SocketInputStream: int socketRead0(java.io.FileDescriptor,byte[],int,int,int)>
<java.lang.Thread: java.lang.Thread currentThread()>/@native-return	<java.lang.Thread: java.lang.Thread currentThread()>
<java.lang.Thread: boolean isInterrupted(boolean)>/@native-return	<java.lang.Thread: boolean isInterrupted(boolean)>
<java.lang.Thread: boolean isAlive()>/@native-return	<java.lang.Thread: boolean isAlive()>
<java.lang.Thread: int countStackFrames()>/@native-return	<java.lang.Thread: int countStackFrames()>
<java.lang.Thread: boolean holdsLock(java.lang.Object)>/@native-return	<java.lang.Thread: boolean holdsLock(java.lang.Object)>
<java.lang.Thread: java.lang.StackTraceElement[][] dumpThreads(java.lang.Thread[])>/@native-return	<java.lang.Thread: java.lang.StackTraceElement[][] dumpThreads(java.lang.Thread[])>
<java.lang.Thread: java.lang.Thread[] getThreads()>/@native-return	<java.lang.Thread: java.lang.Thread[] getThreads()>
<java.lang.reflect.Array: int getLength(java.lang.Object)>/@native-return	<java.lang.reflect.Array: int getLength(java.lang.Object)>
<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>/@native-return	<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>
<java.lang.reflect.Array: boolean getBoolean(java.lang.Object,int)>/@native-return	<java.lang.reflect.Array: boolean getBoolean(java.lang.Object,int)>
<java.lang.reflect.Array: byte getByte(java.lang.Object,int)>/@native-return	<java.lang.reflect.Array: byte getByte(java.lang.Object,int)>
<java.lang.reflect.Array: char getChar(java.lang.Object,int)>/@native-return	<java.lang.reflect.Array: char getChar(java.lang.Object,int)>
<java.lang.reflect.Array: short getShort(java.lang.Object,int)>/@native-return	<java.lang.reflect.Array: short getShort(java.lang.Object,int)>
<java.lang.reflect.Array: int getInt(java.lang.Object,int)>/@native-return	<java.lang.reflect.Array: int getInt(java.lang.Object,int)>
<java.lang.reflect.Array: long getLong(java.lang.Object,int)>/@native-return	<java.lang.reflect.Array: long getLong(java.lang.Object,int)>
<java.lang.reflect.Array: float getFloat(java.lang.Object,int)>/@native-return	<java.lang.reflect.Array: float getFloat(java.lang.Object,int)>
<java.lang.reflect.Array: double getDouble(java.lang.Object,int)>/@native-return	<java.lang.reflect.Array: double getDouble(java.lang.Object,int)>
<java.lang.reflect.Array: java.lang.Object newArray(java.lang.Class,int)>/@native-return	<java.lang.reflect.Array: java.lang.Object newArray(java.lang.Class,int)>
<java.lang.reflect.Array: java.lang.Object multiNewArray(java.lang.Class,int[])>/@native-return	<java.lang.reflect.Array: java.lang.Object multiNewArray(java.lang.Class,int[])>
<sun.nio.ch.FileChannelImpl: long map0(int,long,long)>/@native-return	<sun.nio.ch.FileChannelImpl: long map0(int,long,long)>
<sun.nio.ch.FileChannelImpl: int unmap0(long,long)>/@native-return	<sun.nio.ch.FileChannelImpl: int unmap0(long,long)>
<sun.nio.ch.FileChannelImpl: long transferTo0(java.io.FileDescriptor,long,long,java.io.FileDescriptor)>/@native-return	<sun.nio.ch.FileChannelImpl: long transferTo0(java.io.FileDescriptor,long,long,java.io.FileDescriptor)>
<sun.nio.ch.FileChannelImpl: long position0(java.io.FileDescriptor,long)>/@native-return	<sun.nio.ch.FileChannelImpl: long position0(java.io.FileDescriptor,long)>
<sun.nio.ch.FileChannelImpl: long initIDs()>/@native-return	<sun.nio.ch.FileChannelImpl: long initIDs()>
<sun.net.sdp.SdpSupport: int create0()>/@native-return	<sun.net.sdp.SdpSupport: int create0()>
<sun.reflect.Reflection: java.lang.Class getCallerClass()>/@native-return	<sun.reflect.Reflection: java.lang.Class getCallerClass()>
<sun.reflect.Reflection: java.lang.Class getCallerClass(int)>/@native-return	<sun.reflect.Reflection: java.lang.Class getCallerClass(int)>
<sun.reflect.Reflection: int getClassAccessFlags(java.lang.Class)>/@native-return	<sun.reflect.Reflection: int getClassAccessFlags(java.lang.Class)>
<java.lang.Float: int floatToRawIntBits(float)>/@native-return	<java.lang.Float: int floatToRawIntBits(float)>
<java.lang.Float: float intBitsToFloat(int)>/@native-return	<java.lang.Float: float intBitsToFloat(int)>
<sun.net.PortConfig: int getLower0()>/@native-return	<sun.net.PortConfig: int getLower0()>
<sun.net.PortConfig: int getUpper0()>/@native-return	<sun.net.PortConfig: int getUpper0()>
<java.util.zip.Inflater: long init(boolean)>/@native-return	<java.util.zip.Inflater: long init(boolean)>
<java.util.zip.Inflater: int inflateBytes(long,byte[],int,int)>/@native-return	<java.util.zip.Inflater: int inflateBytes(long,byte[],int,int)>
<java.util.zip.Inflater: int getAdler(long)>/@native-return	<java.util.zip.Inflater: int getAdler(long)>
<java.net.PlainSocketImpl: int socketAvailable()>/@native-return	<java.net.PlainSocketImpl: int socketAvailable()>
<java.net.PlainSocketImpl: int socketGetOption(int,java.lang.Object)>/@native-return	<java.net.PlainSocketImpl: int socketGetOption(int,java.lang.Object)>
<java.lang.ProcessEnvironment: byte[][] environ()>/@native-return	<java.lang.ProcessEnvironment: byte[][] environ()>
<sun.misc.VM: java.lang.ClassLoader latestUserDefinedLoader()>/@native-return	<sun.misc.VM: java.lang.ClassLoader latestUserDefinedLoader()>
<sun.misc.Version: java.lang.String getJvmSpecialVersion()>/@native-return	<sun.misc.Version: java.lang.String getJvmSpecialVersion()>
<sun.misc.Version: java.lang.String getJdkSpecialVersion()>/@native-return	<sun.misc.Version: java.lang.String getJdkSpecialVersion()>
<sun.misc.Version: boolean getJvmVersionInfo()>/@native-return	<sun.misc.Version: boolean getJvmVersionInfo()>
<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>/@native-return	<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>
<java.lang.Throwable: int getStackTraceDepth()>/@native-return	<java.lang.Throwable: int getStackTraceDepth()>
<java.lang.Throwable: java.lang.StackTraceElement getStackTraceElement(int)>/@native-return	<java.lang.Throwable: java.lang.StackTraceElement getStackTraceElement(int)>
<java.net.PlainDatagramSocketImpl: int peek(java.net.InetAddress)>/@native-return	<java.net.PlainDatagramSocketImpl: int peek(java.net.InetAddress)>
<java.net.PlainDatagramSocketImpl: int peekData(java.net.DatagramPacket)>/@native-return	<java.net.PlainDatagramSocketImpl: int peekData(java.net.DatagramPacket)>
<java.net.PlainDatagramSocketImpl: int getTimeToLive()>/@native-return	<java.net.PlainDatagramSocketImpl: int getTimeToLive()>
<java.net.PlainDatagramSocketImpl: byte getTTL()>/@native-return	<java.net.PlainDatagramSocketImpl: byte getTTL()>
<java.net.PlainDatagramSocketImpl: java.lang.Object socketGetOption(int)>/@native-return	<java.net.PlainDatagramSocketImpl: java.lang.Object socketGetOption(int)>
<java.net.PlainDatagramSocketImpl: int dataAvailable()>/@native-return	<java.net.PlainDatagramSocketImpl: int dataAvailable()>
<sun.nio.ch.InheritedChannel: int dup(int)>/@native-return	<sun.nio.ch.InheritedChannel: int dup(int)>
<sun.nio.ch.InheritedChannel: int open0(java.lang.String,int)>/@native-return	<sun.nio.ch.InheritedChannel: int open0(java.lang.String,int)>
<sun.nio.ch.InheritedChannel: int soType0(int)>/@native-return	<sun.nio.ch.InheritedChannel: int soType0(int)>
<sun.nio.ch.InheritedChannel: java.net.InetAddress peerAddress0(int)>/@native-return	<sun.nio.ch.InheritedChannel: java.net.InetAddress peerAddress0(int)>
<sun.nio.ch.InheritedChannel: int peerPort0(int)>/@native-return	<sun.nio.ch.InheritedChannel: int peerPort0(int)>
<sun.nio.fs.UnixNativeDispatcher: byte[] getcwd()>/@native-return	<sun.nio.fs.UnixNativeDispatcher: byte[] getcwd()>
<sun.nio.fs.UnixNativeDispatcher: int dup(int)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: int dup(int)>
<sun.nio.fs.UnixNativeDispatcher: int open0(long,int,int)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: int open0(long,int,int)>
<sun.nio.fs.UnixNativeDispatcher: int openat0(int,long,int,int)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: int openat0(int,long,int,int)>
<sun.nio.fs.UnixNativeDispatcher: long fopen0(long,long)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: long fopen0(long,long)>
<sun.nio.fs.UnixNativeDispatcher: byte[] readlink0(long)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: byte[] readlink0(long)>
<sun.nio.fs.UnixNativeDispatcher: byte[] realpath0(long)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: byte[] realpath0(long)>
<sun.nio.fs.UnixNativeDispatcher: long opendir0(long)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: long opendir0(long)>
<sun.nio.fs.UnixNativeDispatcher: long fdopendir(int)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: long fdopendir(int)>
<sun.nio.fs.UnixNativeDispatcher: byte[] readdir(long)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: byte[] readdir(long)>
<sun.nio.fs.UnixNativeDispatcher: int read(int,long,int)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: int read(int,long,int)>
<sun.nio.fs.UnixNativeDispatcher: int write(int,long,int)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: int write(int,long,int)>
<sun.nio.fs.UnixNativeDispatcher: byte[] getpwuid(int)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: byte[] getpwuid(int)>
<sun.nio.fs.UnixNativeDispatcher: byte[] getgrgid(int)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: byte[] getgrgid(int)>
<sun.nio.fs.UnixNativeDispatcher: int getpwnam0(long)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: int getpwnam0(long)>
<sun.nio.fs.UnixNativeDispatcher: int getgrnam0(long)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: int getgrnam0(long)>
<sun.nio.fs.UnixNativeDispatcher: long pathconf0(long,int)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: long pathconf0(long,int)>
<sun.nio.fs.UnixNativeDispatcher: long fpathconf(int,int)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: long fpathconf(int,int)>
<sun.nio.fs.UnixNativeDispatcher: byte[] strerror(int)>/@native-return	<sun.nio.fs.UnixNativeDispatcher: byte[] strerror(int)>
<sun.nio.fs.UnixNativeDispatcher: int init()>/@native-return	<sun.nio.fs.UnixNativeDispatcher: int init()>
<sun.nio.ch.DatagramDispatcher: int read0(java.io.FileDescriptor,long,int)>/@native-return	<sun.nio.ch.DatagramDispatcher: int read0(java.io.FileDescriptor,long,int)>
<sun.nio.ch.DatagramDispatcher: long readv0(java.io.FileDescriptor,long,int)>/@native-return	<sun.nio.ch.DatagramDispatcher: long readv0(java.io.FileDescriptor,long,int)>
<sun.nio.ch.DatagramDispatcher: int write0(java.io.FileDescriptor,long,int)>/@native-return	<sun.nio.ch.DatagramDispatcher: int write0(java.io.FileDescriptor,long,int)>
<sun.nio.ch.DatagramDispatcher: long writev0(java.io.FileDescriptor,long,int)>/@native-return	<sun.nio.ch.DatagramDispatcher: long writev0(java.io.FileDescriptor,long,int)>
<java.io.FileInputStream: int read0()>/@native-return	<java.io.FileInputStream: int read0()>
<java.io.FileInputStream: int readBytes(byte[],int,int)>/@native-return	<java.io.FileInputStream: int readBytes(byte[],int,int)>
<java.io.FileInputStream: long skip(long)>/@native-return	<java.io.FileInputStream: long skip(long)>
<java.io.FileInputStream: int available()>/@native-return	<java.io.FileInputStream: int available()>
<java.lang.Runtime: int availableProcessors()>/@native-return	<java.lang.Runtime: int availableProcessors()>
<java.lang.Runtime: long freeMemory()>/@native-return	<java.lang.Runtime: long freeMemory()>
<java.lang.Runtime: long totalMemory()>/@native-return	<java.lang.Runtime: long totalMemory()>
<java.lang.Runtime: long maxMemory()>/@native-return	<java.lang.Runtime: long maxMemory()>
<sun.nio.ch.IOUtil: boolean randomBytes(byte[])>/@native-return	<sun.nio.ch.IOUtil: boolean randomBytes(byte[])>
<sun.nio.ch.IOUtil: long makePipe(boolean)>/@native-return	<sun.nio.ch.IOUtil: long makePipe(boolean)>
<sun.nio.ch.IOUtil: boolean drain(int)>/@native-return	<sun.nio.ch.IOUtil: boolean drain(int)>
<sun.nio.ch.IOUtil: int fdVal(java.io.FileDescriptor)>/@native-return	<sun.nio.ch.IOUtil: int fdVal(java.io.FileDescriptor)>
<sun.nio.ch.IOUtil: int fdLimit()>/@native-return	<sun.nio.ch.IOUtil: int fdLimit()>
<sun.nio.ch.IOUtil: int iovMax()>/@native-return	<sun.nio.ch.IOUtil: int iovMax()>
<java.lang.System: long currentTimeMillis()>/@native-return	<java.lang.System: long currentTimeMillis()>
<java.lang.System: long nanoTime()>/@native-return	<java.lang.System: long nanoTime()>
<java.lang.System: int identityHashCode(java.lang.Object)>/@native-return	<java.lang.System: int identityHashCode(java.lang.Object)>
<java.lang.System: java.util.Properties initProperties(java.util.Properties)>/@native-return	<java.lang.System: java.util.Properties initProperties(java.util.Properties)>
<java.lang.System: java.lang.String mapLibraryName(java.lang.String)>/@native-return	<java.lang.System: java.lang.String mapLibraryName(java.lang.String)>
<sun.misc.Unsafe: int getInt(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: int getInt(java.lang.Object,long)>
<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>
<sun.misc.Unsafe: boolean getBoolean(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: boolean getBoolean(java.lang.Object,long)>
<sun.misc.Unsafe: byte getByte(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: byte getByte(java.lang.Object,long)>
<sun.misc.Unsafe: short getShort(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: short getShort(java.lang.Object,long)>
<sun.misc.Unsafe: char getChar(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: char getChar(java.lang.Object,long)>
<sun.misc.Unsafe: long getLong(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: long getLong(java.lang.Object,long)>
<sun.misc.Unsafe: float getFloat(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: float getFloat(java.lang.Object,long)>
<sun.misc.Unsafe: double getDouble(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: double getDouble(java.lang.Object,long)>
<sun.misc.Unsafe: byte getByte(long)>/@native-return	<sun.misc.Unsafe: byte getByte(long)>
<sun.misc.Unsafe: short getShort(long)>/@native-return	<sun.misc.Unsafe: short getShort(long)>
<sun.misc.Unsafe: char getChar(long)>/@native-return	<sun.misc.Unsafe: char getChar(long)>
<sun.misc.Unsafe: int getInt(long)>/@native-return	<sun.misc.Unsafe: int getInt(long)>
<sun.misc.Unsafe: long getLong(long)>/@native-return	<sun.misc.Unsafe: long getLong(long)>
<sun.misc.Unsafe: float getFloat(long)>/@native-return	<sun.misc.Unsafe: float getFloat(long)>
<sun.misc.Unsafe: double getDouble(long)>/@native-return	<sun.misc.Unsafe: double getDouble(long)>
<sun.misc.Unsafe: long getAddress(long)>/@native-return	<sun.misc.Unsafe: long getAddress(long)>
<sun.misc.Unsafe: long allocateMemory(long)>/@native-return	<sun.misc.Unsafe: long allocateMemory(long)>
<sun.misc.Unsafe: long reallocateMemory(long,long)>/@native-return	<sun.misc.Unsafe: long reallocateMemory(long,long)>
<sun.misc.Unsafe: long staticFieldOffset(java.lang.reflect.Field)>/@native-return	<sun.misc.Unsafe: long staticFieldOffset(java.lang.reflect.Field)>
<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>/@native-return	<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>
<sun.misc.Unsafe: java.lang.Object staticFieldBase(java.lang.reflect.Field)>/@native-return	<sun.misc.Unsafe: java.lang.Object staticFieldBase(java.lang.reflect.Field)>
<sun.misc.Unsafe: boolean shouldBeInitialized(java.lang.Class)>/@native-return	<sun.misc.Unsafe: boolean shouldBeInitialized(java.lang.Class)>
<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>/@native-return	<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>
<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>/@native-return	<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>
<sun.misc.Unsafe: int addressSize()>/@native-return	<sun.misc.Unsafe: int addressSize()>
<sun.misc.Unsafe: int pageSize()>/@native-return	<sun.misc.Unsafe: int pageSize()>
<sun.misc.Unsafe: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.ClassLoader,java.security.ProtectionDomain)>/@native-return	<sun.misc.Unsafe: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.ClassLoader,java.security.ProtectionDomain)>
<sun.misc.Unsafe: java.lang.Class defineAnonymousClass(java.lang.Class,byte[],java.lang.Object[])>/@native-return	<sun.misc.Unsafe: java.lang.Class defineAnonymousClass(java.lang.Class,byte[],java.lang.Object[])>
<sun.misc.Unsafe: java.lang.Object allocateInstance(java.lang.Class)>/@native-return	<sun.misc.Unsafe: java.lang.Object allocateInstance(java.lang.Class)>
<sun.misc.Unsafe: boolean tryMonitorEnter(java.lang.Object)>/@native-return	<sun.misc.Unsafe: boolean tryMonitorEnter(java.lang.Object)>
<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>/@native-return	<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>
<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>/@native-return	<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>
<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>/@native-return	<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>
<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: boolean getBooleanVolatile(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: boolean getBooleanVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: char getCharVolatile(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: char getCharVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: float getFloatVolatile(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: float getFloatVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: double getDoubleVolatile(java.lang.Object,long)>/@native-return	<sun.misc.Unsafe: double getDoubleVolatile(java.lang.Object,long)>
<sun.misc.Unsafe: int getLoadAverage(double[],int)>/@native-return	<sun.misc.Unsafe: int getLoadAverage(double[],int)>
<java.util.zip.CRC32: int update(int,int)>/@native-return	<java.util.zip.CRC32: int update(int,int)>
<java.util.zip.CRC32: int updateBytes(int,byte[],int,int)>/@native-return	<java.util.zip.CRC32: int updateBytes(int,byte[],int,int)>
<java.util.zip.CRC32: int updateByteBuffer(int,long,int,int)>/@native-return	<java.util.zip.CRC32: int updateByteBuffer(int,long,int,int)>
<java.net.InetAddressImplFactory: boolean isIPv6Supported()>/@native-return	<java.net.InetAddressImplFactory: boolean isIPv6Supported()>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>/@native-return	<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>/@native-return	<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>/@native-return	<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>/@native-return	<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>
<java.security.AccessController: java.security.AccessControlContext getStackAccessControlContext()>/@native-return	<java.security.AccessController: java.security.AccessControlContext getStackAccessControlContext()>
<java.security.AccessController: java.security.AccessControlContext getInheritedAccessControlContext()>/@native-return	<java.security.AccessController: java.security.AccessControlContext getInheritedAccessControlContext()>
<java.io.Console: java.lang.String encoding()>/@native-return	<java.io.Console: java.lang.String encoding()>
<java.io.Console: boolean echo(boolean)>/@native-return	<java.io.Console: boolean echo(boolean)>
<java.io.Console: boolean istty()>/@native-return	<java.io.Console: boolean istty()>
<java.lang.invoke.MethodHandleNatives: java.lang.invoke.MemberName resolve(java.lang.invoke.MemberName,java.lang.Class)>/@native-return	<java.lang.invoke.MethodHandleNatives: java.lang.invoke.MemberName resolve(java.lang.invoke.MemberName,java.lang.Class)>
<java.lang.invoke.MethodHandleNatives: int getMembers(java.lang.Class,java.lang.String,java.lang.String,int,java.lang.Class,int,java.lang.invoke.MemberName[])>/@native-return	<java.lang.invoke.MethodHandleNatives: int getMembers(java.lang.Class,java.lang.String,java.lang.String,int,java.lang.Class,int,java.lang.invoke.MemberName[])>
<java.lang.invoke.MethodHandleNatives: long objectFieldOffset(java.lang.invoke.MemberName)>/@native-return	<java.lang.invoke.MethodHandleNatives: long objectFieldOffset(java.lang.invoke.MemberName)>
<java.lang.invoke.MethodHandleNatives: long staticFieldOffset(java.lang.invoke.MemberName)>/@native-return	<java.lang.invoke.MethodHandleNatives: long staticFieldOffset(java.lang.invoke.MemberName)>
<java.lang.invoke.MethodHandleNatives: java.lang.Object staticFieldBase(java.lang.invoke.MemberName)>/@native-return	<java.lang.invoke.MethodHandleNatives: java.lang.Object staticFieldBase(java.lang.invoke.MemberName)>
<java.lang.invoke.MethodHandleNatives: java.lang.Object getMemberVMInfo(java.lang.invoke.MemberName)>/@native-return	<java.lang.invoke.MethodHandleNatives: java.lang.Object getMemberVMInfo(java.lang.invoke.MemberName)>
<java.lang.invoke.MethodHandleNatives: int getConstant(int)>/@native-return	<java.lang.invoke.MethodHandleNatives: int getConstant(int)>
<java.lang.invoke.MethodHandleNatives: int getNamedCon(int,java.lang.Object[])>/@native-return	<java.lang.invoke.MethodHandleNatives: int getNamedCon(int,java.lang.Object[])>
<java.lang.ClassLoader$NativeLibrary: long find(java.lang.String)>/@native-return	<java.lang.ClassLoader$NativeLibrary: long find(java.lang.String)>
<sun.net.ExtendedOptionsImpl: boolean flowSupported()>/@native-return	<sun.net.ExtendedOptionsImpl: boolean flowSupported()>
<java.lang.invoke.MethodHandle: java.lang.Object invokeExact(java.lang.Object[])>/@native-return	<java.lang.invoke.MethodHandle: java.lang.Object invokeExact(java.lang.Object[])>
<java.lang.invoke.MethodHandle: java.lang.Object invoke(java.lang.Object[])>/@native-return	<java.lang.invoke.MethodHandle: java.lang.Object invoke(java.lang.Object[])>
<java.lang.invoke.MethodHandle: java.lang.Object invokeBasic(java.lang.Object[])>/@native-return	<java.lang.invoke.MethodHandle: java.lang.Object invokeBasic(java.lang.Object[])>
<java.lang.invoke.MethodHandle: java.lang.Object linkToVirtual(java.lang.Object[])>/@native-return	<java.lang.invoke.MethodHandle: java.lang.Object linkToVirtual(java.lang.Object[])>
<java.lang.invoke.MethodHandle: java.lang.Object linkToStatic(java.lang.Object[])>/@native-return	<java.lang.invoke.MethodHandle: java.lang.Object linkToStatic(java.lang.Object[])>
<java.lang.invoke.MethodHandle: java.lang.Object linkToSpecial(java.lang.Object[])>/@native-return	<java.lang.invoke.MethodHandle: java.lang.Object linkToSpecial(java.lang.Object[])>
<java.lang.invoke.MethodHandle: java.lang.Object linkToInterface(java.lang.Object[])>/@native-return	<java.lang.invoke.MethodHandle: java.lang.Object linkToInterface(java.lang.Object[])>
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters0()>/@native-return	<java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters0()>
<java.lang.reflect.Executable: byte[] getTypeAnnotationBytes0()>/@native-return	<java.lang.reflect.Executable: byte[] getTypeAnnotationBytes0()>
<java.lang.Object: java.lang.Class getClass()>/@native-return	<java.lang.Object: java.lang.Class getClass()>
<java.lang.Object: int hashCode()>/@native-return	<java.lang.Object: int hashCode()>
<java.lang.Object: java.lang.Object clone()>/@native-return	<java.lang.Object: java.lang.Object clone()>
<java.io.ObjectStreamClass: boolean hasStaticInitializer(java.lang.Class)>/@native-return	<java.io.ObjectStreamClass: boolean hasStaticInitializer(java.lang.Class)>
<sun.misc.URLClassPath: java.net.URL[] getLookupCacheURLs(java.lang.ClassLoader)>/@native-return	<sun.misc.URLClassPath: java.net.URL[] getLookupCacheURLs(java.lang.ClassLoader)>
<sun.misc.URLClassPath: int[] getLookupCacheForClassLoader(java.lang.ClassLoader,java.lang.String)>/@native-return	<sun.misc.URLClassPath: int[] getLookupCacheForClassLoader(java.lang.ClassLoader,java.lang.String)>
<sun.misc.URLClassPath: boolean knownToNotExist0(java.lang.ClassLoader,java.lang.String)>/@native-return	<sun.misc.URLClassPath: boolean knownToNotExist0(java.lang.ClassLoader,java.lang.String)>
<sun.nio.ch.DatagramChannelImpl: int receive0(java.io.FileDescriptor,long,int,boolean)>/@native-return	<sun.nio.ch.DatagramChannelImpl: int receive0(java.io.FileDescriptor,long,int,boolean)>
<sun.nio.ch.DatagramChannelImpl: int send0(boolean,java.io.FileDescriptor,long,int,java.net.InetAddress,int)>/@native-return	<sun.nio.ch.DatagramChannelImpl: int send0(boolean,java.io.FileDescriptor,long,int,java.net.InetAddress,int)>
<java.lang.Double: long doubleToRawLongBits(double)>/@native-return	<java.lang.Double: long doubleToRawLongBits(double)>
<java.lang.Double: double longBitsToDouble(long)>/@native-return	<java.lang.Double: double longBitsToDouble(long)>
<java.util.zip.ZipFile: long getEntry(long,byte[],boolean)>/@native-return	<java.util.zip.ZipFile: long getEntry(long,byte[],boolean)>
<java.util.zip.ZipFile: long getNextEntry(long,int)>/@native-return	<java.util.zip.ZipFile: long getNextEntry(long,int)>
<java.util.zip.ZipFile: long open(java.lang.String,int,long,boolean)>/@native-return	<java.util.zip.ZipFile: long open(java.lang.String,int,long,boolean)>
<java.util.zip.ZipFile: int getTotal(long)>/@native-return	<java.util.zip.ZipFile: int getTotal(long)>
<java.util.zip.ZipFile: boolean startsWithLOC(long)>/@native-return	<java.util.zip.ZipFile: boolean startsWithLOC(long)>
<java.util.zip.ZipFile: int read(long,long,long,byte[],int,int)>/@native-return	<java.util.zip.ZipFile: int read(long,long,long,byte[],int,int)>
<java.util.zip.ZipFile: long getEntryTime(long)>/@native-return	<java.util.zip.ZipFile: long getEntryTime(long)>
<java.util.zip.ZipFile: long getEntryCrc(long)>/@native-return	<java.util.zip.ZipFile: long getEntryCrc(long)>
<java.util.zip.ZipFile: long getEntryCSize(long)>/@native-return	<java.util.zip.ZipFile: long getEntryCSize(long)>
<java.util.zip.ZipFile: long getEntrySize(long)>/@native-return	<java.util.zip.ZipFile: long getEntrySize(long)>
<java.util.zip.ZipFile: int getEntryMethod(long)>/@native-return	<java.util.zip.ZipFile: int getEntryMethod(long)>
<java.util.zip.ZipFile: int getEntryFlag(long)>/@native-return	<java.util.zip.ZipFile: int getEntryFlag(long)>
<java.util.zip.ZipFile: byte[] getCommentBytes(long)>/@native-return	<java.util.zip.ZipFile: byte[] getCommentBytes(long)>
<java.util.zip.ZipFile: byte[] getEntryBytes(long,int)>/@native-return	<java.util.zip.ZipFile: byte[] getEntryBytes(long,int)>
<java.util.zip.ZipFile: java.lang.String getZipMessage(long)>/@native-return	<java.util.zip.ZipFile: java.lang.String getZipMessage(long)>
<java.lang.Package: java.lang.String getSystemPackage0(java.lang.String)>/@native-return	<java.lang.Package: java.lang.String getSystemPackage0(java.lang.String)>
<java.lang.Package: java.lang.String[] getSystemPackages0()>/@native-return	<java.lang.Package: java.lang.String[] getSystemPackages0()>
<sun.misc.Perf: java.nio.ByteBuffer attach(java.lang.String,int,int)>/@native-return	<sun.misc.Perf: java.nio.ByteBuffer attach(java.lang.String,int,int)>
<sun.misc.Perf: java.nio.ByteBuffer createLong(java.lang.String,int,int,long)>/@native-return	<sun.misc.Perf: java.nio.ByteBuffer createLong(java.lang.String,int,int,long)>
<sun.misc.Perf: java.nio.ByteBuffer createByteArray(java.lang.String,int,int,byte[],int)>/@native-return	<sun.misc.Perf: java.nio.ByteBuffer createByteArray(java.lang.String,int,int,byte[],int)>
<sun.misc.Perf: long highResCounter()>/@native-return	<sun.misc.Perf: long highResCounter()>
<sun.misc.Perf: long highResFrequency()>/@native-return	<sun.misc.Perf: long highResFrequency()>
<java.nio.MappedByteBuffer: boolean isLoaded0(long,long,int)>/@native-return	<java.nio.MappedByteBuffer: boolean isLoaded0(long,long,int)>
<java.lang.StrictMath: double sin(double)>/@native-return	<java.lang.StrictMath: double sin(double)>
<java.lang.StrictMath: double cos(double)>/@native-return	<java.lang.StrictMath: double cos(double)>
<java.lang.StrictMath: double tan(double)>/@native-return	<java.lang.StrictMath: double tan(double)>
<java.lang.StrictMath: double asin(double)>/@native-return	<java.lang.StrictMath: double asin(double)>
<java.lang.StrictMath: double acos(double)>/@native-return	<java.lang.StrictMath: double acos(double)>
<java.lang.StrictMath: double atan(double)>/@native-return	<java.lang.StrictMath: double atan(double)>
<java.lang.StrictMath: double exp(double)>/@native-return	<java.lang.StrictMath: double exp(double)>
<java.lang.StrictMath: double log(double)>/@native-return	<java.lang.StrictMath: double log(double)>
<java.lang.StrictMath: double log10(double)>/@native-return	<java.lang.StrictMath: double log10(double)>
<java.lang.StrictMath: double sqrt(double)>/@native-return	<java.lang.StrictMath: double sqrt(double)>
<java.lang.StrictMath: double cbrt(double)>/@native-return	<java.lang.StrictMath: double cbrt(double)>
<java.lang.StrictMath: double IEEEremainder(double,double)>/@native-return	<java.lang.StrictMath: double IEEEremainder(double,double)>
<java.lang.StrictMath: double atan2(double,double)>/@native-return	<java.lang.StrictMath: double atan2(double,double)>
<java.lang.StrictMath: double pow(double,double)>/@native-return	<java.lang.StrictMath: double pow(double,double)>
<java.lang.StrictMath: double sinh(double)>/@native-return	<java.lang.StrictMath: double sinh(double)>
<java.lang.StrictMath: double cosh(double)>/@native-return	<java.lang.StrictMath: double cosh(double)>
<java.lang.StrictMath: double tanh(double)>/@native-return	<java.lang.StrictMath: double tanh(double)>
<java.lang.StrictMath: double hypot(double,double)>/@native-return	<java.lang.StrictMath: double hypot(double,double)>
<java.lang.StrictMath: double expm1(double)>/@native-return	<java.lang.StrictMath: double expm1(double)>
<java.lang.StrictMath: double log1p(double)>/@native-return	<java.lang.StrictMath: double log1p(double)>
<java.util.jar.JarFile: java.lang.String[] getMetaInfEntryNames()>/@native-return	<java.util.jar.JarFile: java.lang.String[] getMetaInfEntryNames()>
<sun.nio.ch.NativeThread: long current()>/@native-return	<sun.nio.ch.NativeThread: long current()>
<sun.nio.ch.FileDispatcherImpl: int read0(java.io.FileDescriptor,long,int)>/@native-return	<sun.nio.ch.FileDispatcherImpl: int read0(java.io.FileDescriptor,long,int)>
<sun.nio.ch.FileDispatcherImpl: int pread0(java.io.FileDescriptor,long,int,long)>/@native-return	<sun.nio.ch.FileDispatcherImpl: int pread0(java.io.FileDescriptor,long,int,long)>
<sun.nio.ch.FileDispatcherImpl: long readv0(java.io.FileDescriptor,long,int)>/@native-return	<sun.nio.ch.FileDispatcherImpl: long readv0(java.io.FileDescriptor,long,int)>
<sun.nio.ch.FileDispatcherImpl: int write0(java.io.FileDescriptor,long,int)>/@native-return	<sun.nio.ch.FileDispatcherImpl: int write0(java.io.FileDescriptor,long,int)>
<sun.nio.ch.FileDispatcherImpl: int pwrite0(java.io.FileDescriptor,long,int,long)>/@native-return	<sun.nio.ch.FileDispatcherImpl: int pwrite0(java.io.FileDescriptor,long,int,long)>
<sun.nio.ch.FileDispatcherImpl: long writev0(java.io.FileDescriptor,long,int)>/@native-return	<sun.nio.ch.FileDispatcherImpl: long writev0(java.io.FileDescriptor,long,int)>
<sun.nio.ch.FileDispatcherImpl: int force0(java.io.FileDescriptor,boolean)>/@native-return	<sun.nio.ch.FileDispatcherImpl: int force0(java.io.FileDescriptor,boolean)>
<sun.nio.ch.FileDispatcherImpl: int truncate0(java.io.FileDescriptor,long)>/@native-return	<sun.nio.ch.FileDispatcherImpl: int truncate0(java.io.FileDescriptor,long)>
<sun.nio.ch.FileDispatcherImpl: long size0(java.io.FileDescriptor)>/@native-return	<sun.nio.ch.FileDispatcherImpl: long size0(java.io.FileDescriptor)>
<sun.nio.ch.FileDispatcherImpl: int lock0(java.io.FileDescriptor,boolean,long,long,boolean)>/@native-return	<sun.nio.ch.FileDispatcherImpl: int lock0(java.io.FileDescriptor,boolean,long,long,boolean)>
<sun.reflect.NativeConstructorAccessorImpl: java.lang.Object newInstance0(java.lang.reflect.Constructor,java.lang.Object[])>/@native-return	<sun.reflect.NativeConstructorAccessorImpl: java.lang.Object newInstance0(java.lang.reflect.Constructor,java.lang.Object[])>
<java.lang.String: java.lang.String intern()>/@native-return	<java.lang.String: java.lang.String intern()>
<java.util.TimeZone: java.lang.String getSystemTimeZoneID(java.lang.String)>/@native-return	<java.util.TimeZone: java.lang.String getSystemTimeZoneID(java.lang.String)>
<java.util.TimeZone: java.lang.String getSystemGMTOffsetID()>/@native-return	<java.util.TimeZone: java.lang.String getSystemGMTOffsetID()>
<java.lang.reflect.Field: byte[] getTypeAnnotationBytes0()>/@native-return	<java.lang.reflect.Field: byte[] getTypeAnnotationBytes0()>
<java.lang.ClassLoader: java.lang.Class defineClass0(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>/@native-return	<java.lang.ClassLoader: java.lang.Class defineClass0(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>
<java.lang.ClassLoader: java.lang.Class defineClass1(java.lang.String,byte[],int,int,java.security.ProtectionDomain,java.lang.String)>/@native-return	<java.lang.ClassLoader: java.lang.Class defineClass1(java.lang.String,byte[],int,int,java.security.ProtectionDomain,java.lang.String)>
<java.lang.ClassLoader: java.lang.Class defineClass2(java.lang.String,java.nio.ByteBuffer,int,int,java.security.ProtectionDomain,java.lang.String)>/@native-return	<java.lang.ClassLoader: java.lang.Class defineClass2(java.lang.String,java.nio.ByteBuffer,int,int,java.security.ProtectionDomain,java.lang.String)>
<java.lang.ClassLoader: java.lang.Class findBootstrapClass(java.lang.String)>/@native-return	<java.lang.ClassLoader: java.lang.Class findBootstrapClass(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class findLoadedClass0(java.lang.String)>/@native-return	<java.lang.ClassLoader: java.lang.Class findLoadedClass0(java.lang.String)>
<java.lang.ClassLoader: java.lang.String findBuiltinLib(java.lang.String)>/@native-return	<java.lang.ClassLoader: java.lang.String findBuiltinLib(java.lang.String)>
<java.lang.ClassLoader: java.lang.AssertionStatusDirectives retrieveDirectives()>/@native-return	<java.lang.ClassLoader: java.lang.AssertionStatusDirectives retrieveDirectives()>
<java.util.concurrent.atomic.AtomicLong: boolean VMSupportsCS8()>/@native-return	<java.util.concurrent.atomic.AtomicLong: boolean VMSupportsCS8()>
<sun.nio.ch.SocketChannelImpl: int checkConnect(java.io.FileDescriptor,boolean,boolean)>/@native-return	<sun.nio.ch.SocketChannelImpl: int checkConnect(java.io.FileDescriptor,boolean,boolean)>
<sun.nio.ch.SocketChannelImpl: int sendOutOfBandData(java.io.FileDescriptor,byte)>/@native-return	<sun.nio.ch.SocketChannelImpl: int sendOutOfBandData(java.io.FileDescriptor,byte)>
<java.lang.Class: java.lang.Class forName0(java.lang.String,boolean,java.lang.ClassLoader,java.lang.Class)>/@native-return	<java.lang.Class: java.lang.Class forName0(java.lang.String,boolean,java.lang.ClassLoader,java.lang.Class)>
<java.lang.Class: boolean isInstance(java.lang.Object)>/@native-return	<java.lang.Class: boolean isInstance(java.lang.Object)>
<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>/@native-return	<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
<java.lang.Class: boolean isInterface()>/@native-return	<java.lang.Class: boolean isInterface()>
<java.lang.Class: boolean isArray()>/@native-return	<java.lang.Class: boolean isArray()>
<java.lang.Class: boolean isPrimitive()>/@native-return	<java.lang.Class: boolean isPrimitive()>
<java.lang.Class: java.lang.String getName0()>/@native-return	<java.lang.Class: java.lang.String getName0()>
<java.lang.Class: java.lang.Class getSuperclass()>/@native-return	<java.lang.Class: java.lang.Class getSuperclass()>
<java.lang.Class: java.lang.Class[] getInterfaces0()>/@native-return	<java.lang.Class: java.lang.Class[] getInterfaces0()>
<java.lang.Class: java.lang.Class getComponentType()>/@native-return	<java.lang.Class: java.lang.Class getComponentType()>
<java.lang.Class: int getModifiers()>/@native-return	<java.lang.Class: int getModifiers()>
<java.lang.Class: java.lang.Object[] getSigners()>/@native-return	<java.lang.Class: java.lang.Object[] getSigners()>
<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>/@native-return	<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>
<java.lang.Class: java.lang.Class getDeclaringClass0()>/@native-return	<java.lang.Class: java.lang.Class getDeclaringClass0()>
<java.lang.Class: java.security.ProtectionDomain getProtectionDomain0()>/@native-return	<java.lang.Class: java.security.ProtectionDomain getProtectionDomain0()>
<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>/@native-return	<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>
<java.lang.Class: java.lang.String getGenericSignature0()>/@native-return	<java.lang.Class: java.lang.String getGenericSignature0()>
<java.lang.Class: byte[] getRawAnnotations()>/@native-return	<java.lang.Class: byte[] getRawAnnotations()>
<java.lang.Class: byte[] getRawTypeAnnotations()>/@native-return	<java.lang.Class: byte[] getRawTypeAnnotations()>
<java.lang.Class: sun.reflect.ConstantPool getConstantPool()>/@native-return	<java.lang.Class: sun.reflect.ConstantPool getConstantPool()>
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields0(boolean)>/@native-return	<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields0(boolean)>
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods0(boolean)>/@native-return	<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods0(boolean)>
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>/@native-return	<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>
<java.lang.Class: java.lang.Class[] getDeclaredClasses0()>/@native-return	<java.lang.Class: java.lang.Class[] getDeclaredClasses0()>
<java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>/@native-return	<java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>
