<java.lang.invoke.DirectMethodHandle: java.lang.invoke.MemberName internalMemberName()>	java.lang.invoke.ForceInline
<java.util.Arrays: java.util.List asList(java.lang.Object[])>	java.lang.SafeVarargs
<java.security.Signature: void setParameter(java.lang.String,java.lang.Object)>	java.lang.Deprecated
<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberName(java.lang.Object)>	java.lang.invoke.ForceInline
<java.security.Signature: java.lang.Object getParameter(java.lang.String)>	java.lang.Deprecated
<java.lang.invoke.DirectMethodHandle: long fieldOffset(java.lang.Object)>	java.lang.invoke.ForceInline
<java.lang.invoke.DirectMethodHandle: java.lang.Object checkBase(java.lang.Object)>	java.lang.invoke.ForceInline
<java.lang.invoke.DirectMethodHandle: java.lang.Object nullCheck(java.lang.Object)>	java.lang.invoke.ForceInline
<java.lang.invoke.DirectMethodHandle: java.lang.Object staticBase(java.lang.Object)>	java.lang.invoke.ForceInline
<java.lang.invoke.DirectMethodHandle: long staticOffset(java.lang.Object)>	java.lang.invoke.ForceInline
<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object,java.lang.Object)>	java.lang.invoke.ForceInline
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>	sun.reflect.CallerSensitive
<java.lang.invoke.MethodHandleImpl: java.lang.Object castReference(java.lang.Class,java.lang.Object)>	java.lang.invoke.ForceInline
<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle selectAlternative(boolean,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.MethodHandleImpl: boolean profileBoolean(boolean,int[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.MethodHandleImpl: java.lang.Object guardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.MethodHandleImpl: java.lang.Object[] prepend(java.lang.Object,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.net.MulticastSocket: void setTTL(byte)>	java.lang.Deprecated
<java.net.MulticastSocket: byte getTTL()>	java.lang.Deprecated
<java.net.MulticastSocket: void send(java.net.DatagramPacket,byte)>	java.lang.Deprecated
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>	java.lang.Deprecated
<java.lang.Runtime: void runFinalizersOnExit(boolean)>	java.lang.Deprecated
<java.lang.Runtime: void load(java.lang.String)>	sun.reflect.CallerSensitive
<java.lang.Runtime: void loadLibrary(java.lang.String)>	sun.reflect.CallerSensitive
<java.lang.Runtime: java.io.InputStream getLocalizedInputStream(java.io.InputStream)>	java.lang.Deprecated
<java.lang.Runtime: java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream)>	java.lang.Deprecated
<java.lang.ThreadGroup: void stop()>	java.lang.Deprecated
<java.lang.ThreadGroup: void suspend()>	java.lang.Deprecated
<java.lang.ThreadGroup: void resume()>	java.lang.Deprecated
<java.lang.ThreadGroup: boolean allowThreadSuspension(boolean)>	java.lang.Deprecated
<java.lang.Character: boolean isJavaLetter(char)>	java.lang.Deprecated
<java.lang.Character: boolean isJavaLetterOrDigit(char)>	java.lang.Deprecated
<java.lang.Character: boolean isSpace(char)>	java.lang.Deprecated
<java.lang.invoke.LambdaForm: java.lang.Object interpretWithArguments(java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm: java.lang.Object interpretWithArguments(java.lang.Object[])>	java.lang.invoke.DontInline
<java.lang.invoke.LambdaForm: java.lang.Object interpretName(java.lang.invoke.LambdaForm$Name,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm: java.lang.Object interpretName(java.lang.invoke.LambdaForm$Name,java.lang.Object[])>	java.lang.invoke.DontInline
<java.lang.invoke.MethodHandleImpl$BindCaller: boolean checkCallerClass(java.lang.Class,java.lang.Class)>	sun.reflect.CallerSensitive
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>	sun.reflect.CallerSensitive
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedAction)>	sun.reflect.CallerSensitive
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>	sun.reflect.CallerSensitive
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.security.Permission[])>	sun.reflect.CallerSensitive
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedAction,java.security.AccessControlContext,java.security.Permission[])>	sun.reflect.CallerSensitive
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>	sun.reflect.CallerSensitive
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction)>	sun.reflect.CallerSensitive
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>	sun.reflect.CallerSensitive
<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>	sun.reflect.CallerSensitive
<java.security.AccessController: java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission[])>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.Class forName(java.lang.String)>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.Object newInstance()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.ClassLoader getClassLoader()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.Class getDeclaringClass()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.Class getEnclosingClass()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.Class[] getClasses()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Field[] getFields()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Method[] getMethods()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.Class[] getDeclaredClasses()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>	sun.reflect.CallerSensitive
<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>	sun.reflect.CallerSensitive
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>	sun.reflect.CallerSensitive
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.ResourceBundle$Control)>	sun.reflect.CallerSensitive
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>	sun.reflect.CallerSensitive
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)>	sun.reflect.CallerSensitive
<java.util.ResourceBundle: void clearCache()>	sun.reflect.CallerSensitive
<sun.security.x509.AlgorithmId: void <init>()>	java.lang.Deprecated
<sun.security.x509.AlgorithmId: sun.security.x509.AlgorithmId getAlgorithmId(java.lang.String)>	java.lang.Deprecated
<sun.security.validator.Validator: void setValidationDate(java.util.Date)>	java.lang.Deprecated
<java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum[])>	java.lang.SafeVarargs
<sun.security.x509.X500Name: void emit(sun.security.util.DerOutputStream)>	java.lang.Deprecated
<java.lang.invoke.Invokers: void checkExactType(java.lang.Object,java.lang.Object)>	java.lang.invoke.ForceInline
<java.lang.invoke.Invokers: java.lang.Object checkGenericType(java.lang.Object,java.lang.Object)>	java.lang.invoke.ForceInline
<java.lang.invoke.Invokers: java.lang.Object getCallSiteTarget(java.lang.Object)>	java.lang.invoke.ForceInline
<java.lang.invoke.Invokers: void checkCustomized(java.lang.Object)>	java.lang.invoke.ForceInline
<java.lang.invoke.Invokers: void maybeCustomize(java.lang.invoke.MethodHandle)>	java.lang.invoke.DontInline
<sun.text.normalizer.NormalizerBase: int setIndex(int)>	java.lang.Deprecated
<sun.text.normalizer.NormalizerBase: int getBeginIndex()>	java.lang.Deprecated
<sun.text.normalizer.NormalizerBase: int getEndIndex()>	java.lang.Deprecated
<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>	sun.reflect.CallerSensitive
<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>	sun.reflect.CallerSensitive
<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>	sun.reflect.CallerSensitive
<java.net.PlainDatagramSocketImpl: void setTTL(byte)>	java.lang.Deprecated
<java.net.PlainDatagramSocketImpl: byte getTTL()>	java.lang.Deprecated
<sun.security.util.ObjectIdentifier: boolean equals(sun.security.util.ObjectIdentifier)>	java.lang.Deprecated
<java.lang.invoke.MethodHandle: java.lang.Object invokeExact(java.lang.Object[])>	java.lang.invoke.MethodHandle$PolymorphicSignature
<java.lang.invoke.MethodHandle: java.lang.Object invoke(java.lang.Object[])>	java.lang.invoke.MethodHandle$PolymorphicSignature
<java.lang.invoke.MethodHandle: java.lang.Object invokeBasic(java.lang.Object[])>	java.lang.invoke.MethodHandle$PolymorphicSignature
<java.lang.invoke.MethodHandle: java.lang.Object linkToVirtual(java.lang.Object[])>	java.lang.invoke.MethodHandle$PolymorphicSignature
<java.lang.invoke.MethodHandle: java.lang.Object linkToStatic(java.lang.Object[])>	java.lang.invoke.MethodHandle$PolymorphicSignature
<java.lang.invoke.MethodHandle: java.lang.Object linkToSpecial(java.lang.Object[])>	java.lang.invoke.MethodHandle$PolymorphicSignature
<java.lang.invoke.MethodHandle: java.lang.Object linkToInterface(java.lang.Object[])>	java.lang.invoke.MethodHandle$PolymorphicSignature
<sun.net.www.http.HttpClient: void resetProperties()>	java.lang.Deprecated
<sun.net.www.http.HttpClient: void writeRequests(sun.net.www.MessageHeader)>	java.lang.Deprecated
<java.net.DatagramSocketImpl: void setTTL(byte)>	java.lang.Deprecated
<java.net.DatagramSocketImpl: byte getTTL()>	java.lang.Deprecated
<java.security.SignatureSpi: void engineSetParameter(java.lang.String,java.lang.Object)>	java.lang.Deprecated
<sun.reflect.annotation.AnnotationParser: java.util.Map parseSelectAnnotations(byte[],sun.reflect.ConstantPool,java.lang.Class,java.lang.Class[])>	java.lang.SafeVarargs
<java.security.SignatureSpi: java.lang.Object engineGetParameter(java.lang.String)>	java.lang.Deprecated
<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)>	java.lang.Deprecated
<java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)>	java.lang.Deprecated
<sun.nio.fs.Util: java.util.Set newSet(java.lang.Object[])>	java.lang.SafeVarargs
<sun.nio.fs.Util: java.util.Set newSet(java.util.Set,java.lang.Object[])>	java.lang.SafeVarargs
<java.util.Date: void <init>(int,int,int)>	java.lang.Deprecated
<java.util.Date: void <init>(int,int,int,int,int)>	java.lang.Deprecated
<java.util.Date: void <init>(int,int,int,int,int,int)>	java.lang.Deprecated
<java.util.Date: void <init>(java.lang.String)>	java.lang.Deprecated
<java.util.Date: long UTC(int,int,int,int,int,int)>	java.lang.Deprecated
<java.util.Date: long parse(java.lang.String)>	java.lang.Deprecated
<java.util.Date: int getYear()>	java.lang.Deprecated
<java.util.Date: void setYear(int)>	java.lang.Deprecated
<java.util.Date: int getMonth()>	java.lang.Deprecated
<java.util.Date: void setMonth(int)>	java.lang.Deprecated
<java.util.Date: int getDate()>	java.lang.Deprecated
<java.util.Date: void setDate(int)>	java.lang.Deprecated
<java.util.Date: int getDay()>	java.lang.Deprecated
<java.util.Date: int getHours()>	java.lang.Deprecated
<java.util.Date: void setHours(int)>	java.lang.Deprecated
<java.util.Date: int getMinutes()>	java.lang.Deprecated
<java.util.Date: void setMinutes(int)>	java.lang.Deprecated
<java.util.Date: int getSeconds()>	java.lang.Deprecated
<java.util.Date: void setSeconds(int)>	java.lang.Deprecated
<java.util.Date: java.lang.String toLocaleString()>	java.lang.Deprecated
<java.util.Date: java.lang.String toGMTString()>	java.lang.Deprecated
<java.util.Date: int getTimezoneOffset()>	java.lang.Deprecated
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>	sun.reflect.CallerSensitive
<java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>	java.lang.SafeVarargs
<sun.reflect.Reflection: java.lang.Class getCallerClass()>	sun.reflect.CallerSensitive
<sun.reflect.Reflection: java.lang.Class getCallerClass(int)>	java.lang.Deprecated
<java.io.File: java.net.URL toURL()>	java.lang.Deprecated
<sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>	sun.reflect.CallerSensitive
<sun.misc.Unsafe: int getInt(java.lang.Object,int)>	java.lang.Deprecated
<sun.misc.Unsafe: void putInt(java.lang.Object,int,int)>	java.lang.Deprecated
<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,int)>	java.lang.Deprecated
<sun.misc.Unsafe: void putObject(java.lang.Object,int,java.lang.Object)>	java.lang.Deprecated
<sun.misc.Unsafe: boolean getBoolean(java.lang.Object,int)>	java.lang.Deprecated
<sun.misc.Unsafe: void putBoolean(java.lang.Object,int,boolean)>	java.lang.Deprecated
<sun.misc.Unsafe: byte getByte(java.lang.Object,int)>	java.lang.Deprecated
<sun.misc.Unsafe: void putByte(java.lang.Object,int,byte)>	java.lang.Deprecated
<sun.misc.Unsafe: short getShort(java.lang.Object,int)>	java.lang.Deprecated
<sun.misc.Unsafe: void putShort(java.lang.Object,int,short)>	java.lang.Deprecated
<sun.misc.Unsafe: char getChar(java.lang.Object,int)>	java.lang.Deprecated
<sun.misc.Unsafe: void putChar(java.lang.Object,int,char)>	java.lang.Deprecated
<sun.misc.Unsafe: long getLong(java.lang.Object,int)>	java.lang.Deprecated
<sun.misc.Unsafe: void putLong(java.lang.Object,int,long)>	java.lang.Deprecated
<sun.misc.Unsafe: float getFloat(java.lang.Object,int)>	java.lang.Deprecated
<sun.misc.Unsafe: void putFloat(java.lang.Object,int,float)>	java.lang.Deprecated
<sun.misc.Unsafe: double getDouble(java.lang.Object,int)>	java.lang.Deprecated
<sun.misc.Unsafe: void putDouble(java.lang.Object,int,double)>	java.lang.Deprecated
<sun.misc.Unsafe: int fieldOffset(java.lang.reflect.Field)>	java.lang.Deprecated
<sun.misc.Unsafe: java.lang.Object staticFieldBase(java.lang.Class)>	java.lang.Deprecated
<sun.misc.Unsafe: void monitorEnter(java.lang.Object)>	java.lang.Deprecated
<sun.misc.Unsafe: void monitorExit(java.lang.Object)>	java.lang.Deprecated
<sun.misc.Unsafe: boolean tryMonitorEnter(java.lang.Object)>	java.lang.Deprecated
<sun.net.www.protocol.http.HttpURLConnection: void setDefaultAuthenticator(sun.net.www.protocol.http.HttpAuthenticator)>	java.lang.Deprecated
<java.lang.Thread: void stop()>	java.lang.Deprecated
<java.lang.Thread: void stop(java.lang.Throwable)>	java.lang.Deprecated
<java.lang.Thread: void destroy()>	java.lang.Deprecated
<java.lang.Thread: void suspend()>	java.lang.Deprecated
<java.lang.Thread: void resume()>	java.lang.Deprecated
<java.lang.Thread: int countStackFrames()>	java.lang.Deprecated
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>	sun.reflect.CallerSensitive
<java.lang.invoke.MethodHandleImpl$CountingWrapper: java.lang.invoke.MethodHandle getTarget()>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.MethodHandleImpl$CountingWrapper: void maybeStopCounting(java.lang.Object)>	java.lang.invoke.LambdaForm$Hidden
<java.util.jar.JarVerifier: java.security.cert.Certificate[] getCerts(java.lang.String)>	java.lang.Deprecated
<sun.text.normalizer.SymbolTable: char[] lookup(java.lang.String)>	java.lang.Deprecated
<sun.text.normalizer.SymbolTable: sun.text.normalizer.UnicodeMatcher lookupMatcher(int)>	java.lang.Deprecated
<sun.text.normalizer.SymbolTable: java.lang.String parseReference(java.lang.String,java.text.ParsePosition,int)>	java.lang.Deprecated
<java.io.ObjectStreamClass: java.lang.Class forClass()>	sun.reflect.CallerSensitive
<java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>	java.lang.SafeVarargs
<java.util.Properties: void save(java.io.OutputStream,java.lang.String)>	java.lang.Deprecated
<java.io.ObjectOutputStream$PutField: void write(java.io.ObjectOutput)>	java.lang.Deprecated
<sun.security.jca.GetInstance: java.util.List getServices(java.lang.String,java.util.List)>	java.lang.Deprecated
<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>	sun.reflect.CallerSensitive
<java.lang.System: void runFinalizersOnExit(boolean)>	java.lang.Deprecated
<java.lang.System: void load(java.lang.String)>	sun.reflect.CallerSensitive
<java.lang.System: void loadLibrary(java.lang.String)>	sun.reflect.CallerSensitive
<java.lang.Package: java.lang.Package getPackage(java.lang.String)>	sun.reflect.CallerSensitive
<java.lang.Package: java.lang.Package[] getPackages()>	sun.reflect.CallerSensitive
<java.io.ByteArrayOutputStream: java.lang.String toString(int)>	java.lang.Deprecated
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invoke__V(java.lang.invoke.MethodHandle,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invoke_L_V(java.lang.invoke.MethodHandle,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invoke_LL_V(java.lang.invoke.MethodHandle,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invoke_LLL_V(java.lang.invoke.MethodHandle,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invoke_LLLL_V(java.lang.invoke.MethodHandle,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invoke_LLLLL_V(java.lang.invoke.MethodHandle,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invoke__L(java.lang.invoke.MethodHandle,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invoke_L_L(java.lang.invoke.MethodHandle,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invoke_LL_L(java.lang.invoke.MethodHandle,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invoke_LLL_L(java.lang.invoke.MethodHandle,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invoke_LLLL_L(java.lang.invoke.MethodHandle,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invoke_LLLLL_L(java.lang.invoke.MethodHandle,java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invokeWithArguments(java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<java.lang.invoke.LambdaForm$NamedFunction: java.lang.Object invokeWithArgumentsTracing(java.lang.Object[])>	java.lang.invoke.LambdaForm$Hidden
<jdk.internal.org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>	java.lang.Deprecated
<sun.misc.VM: boolean threadsSuspended()>	java.lang.Deprecated
<sun.misc.VM: boolean suspendThreads()>	java.lang.Deprecated
<sun.misc.VM: void unsuspendThreads()>	java.lang.Deprecated
<sun.misc.VM: void unsuspendSomeThreads()>	java.lang.Deprecated
<sun.misc.VM: int getState()>	java.lang.Deprecated
<sun.misc.VM: void registerVMNotification(sun.misc.VMNotification)>	java.lang.Deprecated
<sun.misc.VM: void asChange(int,int)>	java.lang.Deprecated
<sun.misc.VM: void asChange_otherthread(int,int)>	java.lang.Deprecated
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>	sun.reflect.CallerSensitive
<java.security.Security: java.lang.String getAlgorithmProperty(java.lang.String,java.lang.String)>	java.lang.Deprecated
<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)>	java.lang.Deprecated
<java.net.AbstractPlainDatagramSocketImpl: void setTTL(byte)>	java.lang.Deprecated
<java.net.AbstractPlainDatagramSocketImpl: byte getTTL()>	java.lang.Deprecated
<java.lang.ClassLoader: boolean registerAsParallelCapable()>	sun.reflect.CallerSensitive
<java.lang.ClassLoader: java.lang.ClassLoader getParent()>	sun.reflect.CallerSensitive
<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: byte getByte(java.lang.Object)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: char getChar(java.lang.Object)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: short getShort(java.lang.Object)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: int getInt(java.lang.Object)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: long getLong(java.lang.Object)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: float getFloat(java.lang.Object)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: double getDouble(java.lang.Object)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: void setByte(java.lang.Object,byte)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: void setChar(java.lang.Object,char)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: void setShort(java.lang.Object,short)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: void setInt(java.lang.Object,int)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: void setLong(java.lang.Object,long)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>	sun.reflect.CallerSensitive
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>	sun.reflect.CallerSensitive
<sun.nio.ch.DatagramSocketAdaptor$1: void setTTL(byte)>	java.lang.Deprecated
<sun.nio.ch.DatagramSocketAdaptor$1: byte getTTL()>	java.lang.Deprecated
<java.lang.SecurityManager: boolean getInCheck()>	java.lang.Deprecated
<java.lang.SecurityManager: java.lang.ClassLoader currentClassLoader()>	java.lang.Deprecated
<java.lang.SecurityManager: java.lang.Class currentLoadedClass()>	java.lang.Deprecated
<java.lang.SecurityManager: int classDepth(java.lang.String)>	java.lang.Deprecated
<java.lang.SecurityManager: int classLoaderDepth()>	java.lang.Deprecated
<java.lang.SecurityManager: boolean inClass(java.lang.String)>	java.lang.Deprecated
<java.lang.SecurityManager: boolean inClassLoader()>	java.lang.Deprecated
<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress,byte)>	java.lang.Deprecated
<java.lang.SecurityManager: boolean checkTopLevelWindow(java.lang.Object)>	java.lang.Deprecated
<java.lang.SecurityManager: void checkSystemClipboardAccess()>	java.lang.Deprecated
<java.lang.SecurityManager: void checkAwtEventQueueAccess()>	java.lang.Deprecated
<java.io.DataInputStream: java.lang.String readLine()>	java.lang.Deprecated
<java.lang.SecurityManager: void checkMemberAccess(java.lang.Class,int)>	java.lang.Deprecated
<java.lang.SecurityManager: void checkMemberAccess(java.lang.Class,int)>	sun.reflect.CallerSensitive
<java.lang.String: void <init>(byte[],int,int,int)>	java.lang.Deprecated
<java.lang.String: void <init>(byte[],int)>	java.lang.Deprecated
<java.lang.String: void getBytes(int,int,byte[],int)>	java.lang.Deprecated
<java.io.StreamTokenizer: void <init>(java.io.InputStream)>	java.lang.Deprecated
<java.io.ObjectInputStream: java.lang.String readLine()>	java.lang.Deprecated
<java.net.Socket: void <init>(java.lang.String,int,boolean)>	java.lang.Deprecated
<java.net.Socket: void <init>(java.net.InetAddress,int,boolean)>	java.lang.Deprecated
<sun.security.jca.ProviderList: java.util.List getServices(java.lang.String,java.util.List)>	java.lang.Deprecated
<java.io.ObjectStreamField: java.lang.Class getType()>	sun.reflect.CallerSensitive
