<handle <java.util.stream.DoublePipeline$5$1: void lambda$accept$0(double)>>	<java.util.stream.DoublePipeline$5$1: void lambda$accept$0(double)>	void	double	1
<handle <java.util.function.BiConsumer: void lambda$andThen$0(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>>	<java.util.function.BiConsumer: void lambda$andThen$0(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>	void	java.util.function.BiConsumer,java.lang.Object,java.lang.Object	3
<handle <java.time.YearMonth: java.time.YearMonth from(java.time.temporal.TemporalAccessor)>>	<java.time.YearMonth: java.time.YearMonth from(java.time.temporal.TemporalAccessor)>	java.time.YearMonth	java.time.temporal.TemporalAccessor	1
<handle <java.util.function.BinaryOperator: java.lang.Object lambda$minBy$0(java.util.Comparator,java.lang.Object,java.lang.Object)>>	<java.util.function.BinaryOperator: java.lang.Object lambda$minBy$0(java.util.Comparator,java.lang.Object,java.lang.Object)>	java.lang.Object	java.util.Comparator,java.lang.Object,java.lang.Object	3
<handle <java.util.function.BinaryOperator: java.lang.Object lambda$maxBy$1(java.util.Comparator,java.lang.Object,java.lang.Object)>>	<java.util.function.BinaryOperator: java.lang.Object lambda$maxBy$1(java.util.Comparator,java.lang.Object,java.lang.Object)>	java.lang.Object	java.util.Comparator,java.lang.Object,java.lang.Object	3
<handle <java.util.stream.Sink: void accept(double)>>	<java.util.stream.Sink: void accept(double)>	void	double	1
<handle <java.lang.Double: java.lang.Double valueOf(double)>>	<java.lang.Double: java.lang.Double valueOf(double)>	java.lang.Double	double	1
<handle <java.util.stream.DoublePipeline: double lambda$distinct$0(java.lang.Double)>>	<java.util.stream.DoublePipeline: double lambda$distinct$0(java.lang.Double)>	double	java.lang.Double	1
<handle <java.util.stream.DoublePipeline: double[] lambda$sum$1()>>	<java.util.stream.DoublePipeline: double[] lambda$sum$1()>	double[]		0
<handle <java.util.stream.DoublePipeline: void lambda$sum$2(double[],double)>>	<java.util.stream.DoublePipeline: void lambda$sum$2(double[],double)>	void	double[],double	2
<handle <java.util.stream.DoublePipeline: void lambda$sum$3(double[],double[])>>	<java.util.stream.DoublePipeline: void lambda$sum$3(double[],double[])>	void	double[],double[]	2
<handle <java.lang.Math: double min(double,double)>>	<java.lang.Math: double min(double,double)>	double	double,double	2
<handle <java.lang.Math: double max(double,double)>>	<java.lang.Math: double max(double,double)>	double	double,double	2
<handle <java.util.stream.DoublePipeline: double[] lambda$average$4()>>	<java.util.stream.DoublePipeline: double[] lambda$average$4()>	double[]		0
<handle <java.util.stream.DoublePipeline: void lambda$average$5(double[],double)>>	<java.util.stream.DoublePipeline: void lambda$average$5(double[],double)>	void	double[],double	2
<handle <java.util.stream.DoublePipeline: void lambda$average$6(double[],double[])>>	<java.util.stream.DoublePipeline: void lambda$average$6(double[],double[])>	void	double[],double[]	2
<handle <java.util.stream.DoublePipeline: long lambda$count$7(double)>>	<java.util.stream.DoublePipeline: long lambda$count$7(double)>	long	double	1
<handle <java.util.DoubleSummaryStatistics: void <init>()>>	<java.util.DoubleSummaryStatistics: void <init>()>	void		0
<handle <java.util.DoubleSummaryStatistics: void accept(double)>>	<java.util.DoubleSummaryStatistics: void accept(double)>	void	double	1
<handle <java.util.DoubleSummaryStatistics: void combine(java.util.DoubleSummaryStatistics)>>	<java.util.DoubleSummaryStatistics: void combine(java.util.DoubleSummaryStatistics)>	void	java.util.DoubleSummaryStatistics	1
<handle <java.util.stream.DoublePipeline: java.lang.Object lambda$collect$8(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>>	<java.util.stream.DoublePipeline: java.lang.Object lambda$collect$8(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>	java.lang.Object	java.util.function.BiConsumer,java.lang.Object,java.lang.Object	3
<handle <java.util.stream.DoublePipeline: java.lang.Double[] lambda$toArray$9(int)>>	<java.util.stream.DoublePipeline: java.lang.Double[] lambda$toArray$9(int)>	java.lang.Double[]	int	1
<handle <java.util.function.UnaryOperator: java.lang.Object lambda$identity$0(java.lang.Object)>>	<java.util.function.UnaryOperator: java.lang.Object lambda$identity$0(java.lang.Object)>	java.lang.Object	java.lang.Object	1
<handle <java.util.Arrays: void lambda$parallelSetAll$0(java.lang.Object[],java.util.function.IntFunction,int)>>	<java.util.Arrays: void lambda$parallelSetAll$0(java.lang.Object[],java.util.function.IntFunction,int)>	void	java.lang.Object[],java.util.function.IntFunction,int	3
<handle <java.util.Arrays: void lambda$parallelSetAll$1(int[],java.util.function.IntUnaryOperator,int)>>	<java.util.Arrays: void lambda$parallelSetAll$1(int[],java.util.function.IntUnaryOperator,int)>	void	int[],java.util.function.IntUnaryOperator,int	3
<handle <java.util.Arrays: void lambda$parallelSetAll$2(long[],java.util.function.IntToLongFunction,int)>>	<java.util.Arrays: void lambda$parallelSetAll$2(long[],java.util.function.IntToLongFunction,int)>	void	long[],java.util.function.IntToLongFunction,int	3
<handle <java.util.Arrays: void lambda$parallelSetAll$3(double[],java.util.function.IntToDoubleFunction,int)>>	<java.util.Arrays: void lambda$parallelSetAll$3(double[],java.util.function.IntToDoubleFunction,int)>	void	double[],java.util.function.IntToDoubleFunction,int	3
<handle <java.util.stream.ReferencePipeline: java.lang.Object[] lambda$toArray$0(int)>>	<java.util.stream.ReferencePipeline: java.lang.Object[] lambda$toArray$0(int)>	java.lang.Object[]	int	1
<handle <java.util.stream.ReferencePipeline: void lambda$collect$1(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>>	<java.util.stream.ReferencePipeline: void lambda$collect$1(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>	void	java.util.function.BiConsumer,java.lang.Object,java.lang.Object	3
<handle <java.util.stream.ReferencePipeline: long lambda$count$2(java.lang.Object)>>	<java.util.stream.ReferencePipeline: long lambda$count$2(java.lang.Object)>	long	java.lang.Object	1
<handle <java.util.stream.StreamSpliterators$SliceSpliterator$OfInt: void lambda$emptyConsumer$0(int)>>	<java.util.stream.StreamSpliterators$SliceSpliterator$OfInt: void lambda$emptyConsumer$0(int)>	void	int	1
<handle <java.time.ZonedDateTime: java.time.ZonedDateTime from(java.time.temporal.TemporalAccessor)>>	<java.time.ZonedDateTime: java.time.ZonedDateTime from(java.time.temporal.TemporalAccessor)>	java.time.ZonedDateTime	java.time.temporal.TemporalAccessor	1
<handle <java.util.function.Consumer: void accept(java.lang.Object)>>	<java.util.function.Consumer: void accept(java.lang.Object)>	void	java.lang.Object	1
<handle <java.util.stream.Sink: void accept(long)>>	<java.util.stream.Sink: void accept(long)>	void	long	1
<handle <java.util.stream.Nodes: java.util.stream.Node$Builder$OfInt intBuilder(long)>>	<java.util.stream.Nodes: java.util.stream.Node$Builder$OfInt intBuilder(long)>	java.util.stream.Node$Builder$OfInt	long	1
<handle <java.util.stream.Nodes$ConcNode$OfInt: void <init>(java.util.stream.Node$OfInt,java.util.stream.Node$OfInt)>>	<java.util.stream.Nodes$ConcNode$OfInt: void <init>(java.util.stream.Node$OfInt,java.util.stream.Node$OfInt)>	void	java.util.stream.Node$OfInt,java.util.stream.Node$OfInt	2
<handle <java.util.function.BiFunction: java.lang.Object lambda$andThen$0(java.util.function.Function,java.lang.Object,java.lang.Object)>>	<java.util.function.BiFunction: java.lang.Object lambda$andThen$0(java.util.function.Function,java.lang.Object,java.lang.Object)>	java.lang.Object	java.util.function.Function,java.lang.Object,java.lang.Object	3
<handle <java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: void lambda$setValue$0(java.time.format.DateTimeParseContext,long,int,int,java.time.chrono.Chronology)>>	<java.time.format.DateTimeFormatterBuilder$ReducedPrinterParser: void lambda$setValue$0(java.time.format.DateTimeParseContext,long,int,int,java.time.chrono.Chronology)>	void	java.time.format.DateTimeParseContext,long,int,int,java.time.chrono.Chronology	5
<handle <java.time.format.DateTimeFormatterBuilder: java.time.ZoneId lambda$static$0(java.time.temporal.TemporalAccessor)>>	<java.time.format.DateTimeFormatterBuilder: java.time.ZoneId lambda$static$0(java.time.temporal.TemporalAccessor)>	java.time.ZoneId	java.time.temporal.TemporalAccessor	1
<handle <java.util.function.Consumer: void accept(java.lang.Object)>>	<java.util.function.Consumer: void accept(java.lang.Object)>	void	java.lang.Object	1
<handle <java.util.function.Consumer: void accept(java.lang.Object)>>	<java.util.function.Consumer: void accept(java.lang.Object)>	void	java.lang.Object	1
<handle <java.util.Optional: boolean isPresent()>>	<java.util.Optional: boolean isPresent()>	boolean		0
<handle <java.util.stream.FindOps$FindSink$OfRef: void <init>()>>	<java.util.stream.FindOps$FindSink$OfRef: void <init>()>	void		0
<handle <java.util.OptionalInt: boolean isPresent()>>	<java.util.OptionalInt: boolean isPresent()>	boolean		0
<handle <java.util.stream.FindOps$FindSink$OfInt: void <init>()>>	<java.util.stream.FindOps$FindSink$OfInt: void <init>()>	void		0
<handle <java.util.OptionalLong: boolean isPresent()>>	<java.util.OptionalLong: boolean isPresent()>	boolean		0
<handle <java.util.stream.FindOps$FindSink$OfLong: void <init>()>>	<java.util.stream.FindOps$FindSink$OfLong: void <init>()>	void		0
<handle <java.util.OptionalDouble: boolean isPresent()>>	<java.util.OptionalDouble: boolean isPresent()>	boolean		0
<handle <java.util.stream.FindOps$FindSink$OfDouble: void <init>()>>	<java.util.stream.FindOps$FindSink$OfDouble: void <init>()>	void		0
<handle <java.time.format.DateTimeFormatter: java.time.Period lambda$static$0(java.time.temporal.TemporalAccessor)>>	<java.time.format.DateTimeFormatter: java.time.Period lambda$static$0(java.time.temporal.TemporalAccessor)>	java.time.Period	java.time.temporal.TemporalAccessor	1
<handle <java.time.format.DateTimeFormatter: java.lang.Boolean lambda$static$1(java.time.temporal.TemporalAccessor)>>	<java.time.format.DateTimeFormatter: java.lang.Boolean lambda$static$1(java.time.temporal.TemporalAccessor)>	java.lang.Boolean	java.time.temporal.TemporalAccessor	1
<handle <java.util.Collections$CheckedList: java.lang.Object lambda$replaceAll$0(java.util.function.UnaryOperator,java.lang.Object)>>	<java.util.Collections$CheckedList: java.lang.Object lambda$replaceAll$0(java.util.function.UnaryOperator,java.lang.Object)>	java.lang.Object	java.util.function.UnaryOperator,java.lang.Object	2
<handle <java.util.function.DoubleConsumer: void lambda$andThen$0(java.util.function.DoubleConsumer,double)>>	<java.util.function.DoubleConsumer: void lambda$andThen$0(java.util.function.DoubleConsumer,double)>	void	java.util.function.DoubleConsumer,double	2
<handle <java.time.OffsetTime: java.time.OffsetTime from(java.time.temporal.TemporalAccessor)>>	<java.time.OffsetTime: java.time.OffsetTime from(java.time.temporal.TemporalAccessor)>	java.time.OffsetTime	java.time.temporal.TemporalAccessor	1
<handle <java.time.LocalDateTime: java.time.LocalDateTime from(java.time.temporal.TemporalAccessor)>>	<java.time.LocalDateTime: java.time.LocalDateTime from(java.time.temporal.TemporalAccessor)>	java.time.LocalDateTime	java.time.temporal.TemporalAccessor	1
<handle <java.util.regex.Pattern: boolean lambda$asPredicate$0(java.lang.String)>>	<java.util.regex.Pattern: boolean lambda$asPredicate$0(java.lang.String)>	boolean	java.lang.String	1
<handle <java.util.stream.Node$OfLong: void lambda$truncate$0(long)>>	<java.util.stream.Node$OfLong: void lambda$truncate$0(long)>	void	long	1
<handle <java.util.function.Consumer: void accept(java.lang.Object)>>	<java.util.function.Consumer: void accept(java.lang.Object)>	void	java.lang.Object	1
<handle <java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void lambda$entryConsumer$0(java.util.function.Consumer,java.util.Map$Entry)>>	<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void lambda$entryConsumer$0(java.util.function.Consumer,java.util.Map$Entry)>	void	java.util.function.Consumer,java.util.Map$Entry	2
<handle <java.util.BitSet: java.util.Spliterator$OfInt lambda$stream$0()>>	<java.util.BitSet: java.util.Spliterator$OfInt lambda$stream$0()>	java.util.Spliterator$OfInt		0
<handle <java.util.function.Consumer: void accept(java.lang.Object)>>	<java.util.function.Consumer: void accept(java.lang.Object)>	void	java.lang.Object	1
<handle <java.util.function.LongPredicate: boolean lambda$and$0(java.util.function.LongPredicate,long)>>	<java.util.function.LongPredicate: boolean lambda$and$0(java.util.function.LongPredicate,long)>	boolean	java.util.function.LongPredicate,long	2
<handle <java.util.function.LongPredicate: boolean lambda$negate$1(long)>>	<java.util.function.LongPredicate: boolean lambda$negate$1(long)>	boolean	long	1
<handle <java.util.function.LongPredicate: boolean lambda$or$2(java.util.function.LongPredicate,long)>>	<java.util.function.LongPredicate: boolean lambda$or$2(java.util.function.LongPredicate,long)>	boolean	java.util.function.LongPredicate,long	2
<handle <java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>>	<java.time.Instant: java.time.Instant from(java.time.temporal.TemporalAccessor)>	java.time.Instant	java.time.temporal.TemporalAccessor	1
<handle <java.util.stream.AbstractPipeline: java.util.Spliterator lambda$spliterator$0()>>	<java.util.stream.AbstractPipeline: java.util.Spliterator lambda$spliterator$0()>	java.util.Spliterator		0
<handle <java.util.stream.SliceOps: java.lang.Object[] lambda$castingArray$0(int)>>	<java.util.stream.SliceOps: java.lang.Object[] lambda$castingArray$0(int)>	java.lang.Object[]	int	1
<handle <java.util.stream.AbstractPipeline: java.util.Spliterator lambda$wrapSpliterator$1(java.util.Spliterator)>>	<java.util.stream.AbstractPipeline: java.util.Spliterator lambda$wrapSpliterator$1(java.util.Spliterator)>	java.util.Spliterator	java.util.Spliterator	1
<handle <java.util.stream.AbstractPipeline: java.lang.Object[] lambda$opEvaluateParallelLazy$2(int)>>	<java.util.stream.AbstractPipeline: java.lang.Object[] lambda$opEvaluateParallelLazy$2(int)>	java.lang.Object[]	int	1
<handle <java.util.stream.Sink: void accept(int)>>	<java.util.stream.Sink: void accept(int)>	void	int	1
<handle <java.util.function.Consumer: void accept(java.lang.Object)>>	<java.util.function.Consumer: void accept(java.lang.Object)>	void	java.lang.Object	1
<handle <java.util.function.IntUnaryOperator: int lambda$compose$0(java.util.function.IntUnaryOperator,int)>>	<java.util.function.IntUnaryOperator: int lambda$compose$0(java.util.function.IntUnaryOperator,int)>	int	java.util.function.IntUnaryOperator,int	2
<handle <java.util.function.IntUnaryOperator: int lambda$andThen$1(java.util.function.IntUnaryOperator,int)>>	<java.util.function.IntUnaryOperator: int lambda$andThen$1(java.util.function.IntUnaryOperator,int)>	int	java.util.function.IntUnaryOperator,int	2
<handle <java.util.function.IntUnaryOperator: int lambda$identity$2(int)>>	<java.util.function.IntUnaryOperator: int lambda$identity$2(int)>	int	int	1
<handle <sun.net.ExtendedOptionsImpl: java.lang.Void lambda$static$0()>>	<sun.net.ExtendedOptionsImpl: java.lang.Void lambda$static$0()>	java.lang.Void		0
<handle <java.util.stream.ForEachOps$ForEachOrderedTask: java.lang.Object[] lambda$doCompute$0(int)>>	<java.util.stream.ForEachOps$ForEachOrderedTask: java.lang.Object[] lambda$doCompute$0(int)>	java.lang.Object[]	int	1
<handle <java.util.stream.Node$OfInt: void lambda$truncate$0(int)>>	<java.util.stream.Node$OfInt: void lambda$truncate$0(int)>	void	int	1
<handle <java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void lambda$tryAdvance$0(java.lang.Object)>>	<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void lambda$tryAdvance$0(java.lang.Object)>	void	java.lang.Object	1
<handle <java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void lambda$forEachRemaining$1(java.lang.Object)>>	<java.util.stream.StreamSpliterators$SliceSpliterator$OfRef: void lambda$forEachRemaining$1(java.lang.Object)>	void	java.lang.Object	1
<handle <java.util.stream.Nodes: java.util.stream.Node$Builder$OfLong longBuilder(long)>>	<java.util.stream.Nodes: java.util.stream.Node$Builder$OfLong longBuilder(long)>	java.util.stream.Node$Builder$OfLong	long	1
<handle <java.util.stream.Nodes$ConcNode$OfLong: void <init>(java.util.stream.Node$OfLong,java.util.stream.Node$OfLong)>>	<java.util.stream.Nodes$ConcNode$OfLong: void <init>(java.util.stream.Node$OfLong,java.util.stream.Node$OfLong)>	void	java.util.stream.Node$OfLong,java.util.stream.Node$OfLong	2
<handle <java.util.Map$Entry: int lambda$comparingByKey$bbdbfea9$1(java.util.Map$Entry,java.util.Map$Entry)>>	<java.util.Map$Entry: int lambda$comparingByKey$bbdbfea9$1(java.util.Map$Entry,java.util.Map$Entry)>	int	java.util.Map$Entry,java.util.Map$Entry	2
<handle <java.util.Map$Entry: int lambda$comparingByValue$1065357e$1(java.util.Map$Entry,java.util.Map$Entry)>>	<java.util.Map$Entry: int lambda$comparingByValue$1065357e$1(java.util.Map$Entry,java.util.Map$Entry)>	int	java.util.Map$Entry,java.util.Map$Entry	2
<handle <java.util.Map$Entry: int lambda$comparingByKey$6d558cbf$1(java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry)>>	<java.util.Map$Entry: int lambda$comparingByKey$6d558cbf$1(java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry)>	int	java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry	3
<handle <java.util.Map$Entry: int lambda$comparingByValue$827a17d5$1(java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry)>>	<java.util.Map$Entry: int lambda$comparingByValue$827a17d5$1(java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry)>	int	java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry	3
<handle <java.util.Map$Entry: int lambda$comparingByValue$827a17d5$1(java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry)>>	<java.util.Map$Entry: int lambda$comparingByValue$827a17d5$1(java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry)>	int	java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry	3
<handle <java.util.Map$Entry: int lambda$comparingByKey$bbdbfea9$1(java.util.Map$Entry,java.util.Map$Entry)>>	<java.util.Map$Entry: int lambda$comparingByKey$bbdbfea9$1(java.util.Map$Entry,java.util.Map$Entry)>	int	java.util.Map$Entry,java.util.Map$Entry	2
<handle <java.util.Map$Entry: int lambda$comparingByValue$1065357e$1(java.util.Map$Entry,java.util.Map$Entry)>>	<java.util.Map$Entry: int lambda$comparingByValue$1065357e$1(java.util.Map$Entry,java.util.Map$Entry)>	int	java.util.Map$Entry,java.util.Map$Entry	2
<handle <java.util.Map$Entry: int lambda$comparingByKey$6d558cbf$1(java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry)>>	<java.util.Map$Entry: int lambda$comparingByKey$6d558cbf$1(java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry)>	int	java.util.Comparator,java.util.Map$Entry,java.util.Map$Entry	3
<handle <java.nio.CharBuffer: java.util.Spliterator$OfInt lambda$chars$0()>>	<java.nio.CharBuffer: java.util.Spliterator$OfInt lambda$chars$0()>	java.util.Spliterator$OfInt		0
<handle <java.util.stream.SliceOps$2: java.lang.Integer[] lambda$opEvaluateParallelLazy$0(int)>>	<java.util.stream.SliceOps$2: java.lang.Integer[] lambda$opEvaluateParallelLazy$0(int)>	java.lang.Integer[]	int	1
<handle <java.time.Year: java.time.Year from(java.time.temporal.TemporalAccessor)>>	<java.time.Year: java.time.Year from(java.time.temporal.TemporalAccessor)>	java.time.Year	java.time.temporal.TemporalAccessor	1
<handle <java.util.stream.Sink: void accept(long)>>	<java.util.stream.Sink: void accept(long)>	void	long	1
<handle <java.lang.Long: java.lang.Long valueOf(long)>>	<java.lang.Long: java.lang.Long valueOf(long)>	java.lang.Long	long	1
<handle <java.util.stream.LongPipeline: long lambda$distinct$0(java.lang.Long)>>	<java.util.stream.LongPipeline: long lambda$distinct$0(java.lang.Long)>	long	java.lang.Long	1
<handle <java.lang.Long: long sum(long,long)>>	<java.lang.Long: long sum(long,long)>	long	long,long	2
<handle <java.lang.Math: long min(long,long)>>	<java.lang.Math: long min(long,long)>	long	long,long	2
<handle <java.lang.Math: long max(long,long)>>	<java.lang.Math: long max(long,long)>	long	long,long	2
<handle <java.util.stream.LongPipeline: long[] lambda$average$1()>>	<java.util.stream.LongPipeline: long[] lambda$average$1()>	long[]		0
<handle <java.util.stream.LongPipeline: void lambda$average$2(long[],long)>>	<java.util.stream.LongPipeline: void lambda$average$2(long[],long)>	void	long[],long	2
<handle <java.util.stream.LongPipeline: void lambda$average$3(long[],long[])>>	<java.util.stream.LongPipeline: void lambda$average$3(long[],long[])>	void	long[],long[]	2
<handle <java.util.stream.LongPipeline: long lambda$count$4(long)>>	<java.util.stream.LongPipeline: long lambda$count$4(long)>	long	long	1
<handle <java.util.LongSummaryStatistics: void <init>()>>	<java.util.LongSummaryStatistics: void <init>()>	void		0
<handle <java.util.LongSummaryStatistics: void accept(long)>>	<java.util.LongSummaryStatistics: void accept(long)>	void	long	1
<handle <java.util.LongSummaryStatistics: void combine(java.util.LongSummaryStatistics)>>	<java.util.LongSummaryStatistics: void combine(java.util.LongSummaryStatistics)>	void	java.util.LongSummaryStatistics	1
<handle <java.util.stream.LongPipeline: java.lang.Object lambda$collect$5(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>>	<java.util.stream.LongPipeline: java.lang.Object lambda$collect$5(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>	java.lang.Object	java.util.function.BiConsumer,java.lang.Object,java.lang.Object	3
<handle <java.util.stream.LongPipeline: java.lang.Long[] lambda$toArray$6(int)>>	<java.util.stream.LongPipeline: java.lang.Long[] lambda$toArray$6(int)>	java.lang.Long[]	int	1
<handle <java.util.stream.SliceOps$4: java.lang.Double[] lambda$opEvaluateParallelLazy$0(int)>>	<java.util.stream.SliceOps$4: java.lang.Double[] lambda$opEvaluateParallelLazy$0(int)>	java.lang.Double[]	int	1
<handle <java.util.Comparator: int lambda$thenComparing$36697e65$1(java.util.Comparator,java.lang.Object,java.lang.Object)>>	<java.util.Comparator: int lambda$thenComparing$36697e65$1(java.util.Comparator,java.lang.Object,java.lang.Object)>	int	java.util.Comparator,java.lang.Object,java.lang.Object	3
<handle <java.util.Comparator: int lambda$comparing$ea9a8b3a$1(java.util.Comparator,java.util.function.Function,java.lang.Object,java.lang.Object)>>	<java.util.Comparator: int lambda$comparing$ea9a8b3a$1(java.util.Comparator,java.util.function.Function,java.lang.Object,java.lang.Object)>	int	java.util.Comparator,java.util.function.Function,java.lang.Object,java.lang.Object	4
<handle <java.util.Comparator: int lambda$comparing$77a9974f$1(java.util.function.Function,java.lang.Object,java.lang.Object)>>	<java.util.Comparator: int lambda$comparing$77a9974f$1(java.util.function.Function,java.lang.Object,java.lang.Object)>	int	java.util.function.Function,java.lang.Object,java.lang.Object	3
<handle <java.util.Comparator: int lambda$comparingInt$7b0bb60$1(java.util.function.ToIntFunction,java.lang.Object,java.lang.Object)>>	<java.util.Comparator: int lambda$comparingInt$7b0bb60$1(java.util.function.ToIntFunction,java.lang.Object,java.lang.Object)>	int	java.util.function.ToIntFunction,java.lang.Object,java.lang.Object	3
<handle <java.util.Comparator: int lambda$comparingLong$6043328a$1(java.util.function.ToLongFunction,java.lang.Object,java.lang.Object)>>	<java.util.Comparator: int lambda$comparingLong$6043328a$1(java.util.function.ToLongFunction,java.lang.Object,java.lang.Object)>	int	java.util.function.ToLongFunction,java.lang.Object,java.lang.Object	3
<handle <java.util.Comparator: int lambda$comparingDouble$8dcf42ea$1(java.util.function.ToDoubleFunction,java.lang.Object,java.lang.Object)>>	<java.util.Comparator: int lambda$comparingDouble$8dcf42ea$1(java.util.function.ToDoubleFunction,java.lang.Object,java.lang.Object)>	int	java.util.function.ToDoubleFunction,java.lang.Object,java.lang.Object	3
<handle <java.util.Comparator: int lambda$comparingLong$6043328a$1(java.util.function.ToLongFunction,java.lang.Object,java.lang.Object)>>	<java.util.Comparator: int lambda$comparingLong$6043328a$1(java.util.function.ToLongFunction,java.lang.Object,java.lang.Object)>	int	java.util.function.ToLongFunction,java.lang.Object,java.lang.Object	3
<handle <java.util.Comparator: int lambda$comparing$ea9a8b3a$1(java.util.Comparator,java.util.function.Function,java.lang.Object,java.lang.Object)>>	<java.util.Comparator: int lambda$comparing$ea9a8b3a$1(java.util.Comparator,java.util.function.Function,java.lang.Object,java.lang.Object)>	int	java.util.Comparator,java.util.function.Function,java.lang.Object,java.lang.Object	4
<handle <java.util.Comparator: int lambda$comparing$77a9974f$1(java.util.function.Function,java.lang.Object,java.lang.Object)>>	<java.util.Comparator: int lambda$comparing$77a9974f$1(java.util.function.Function,java.lang.Object,java.lang.Object)>	int	java.util.function.Function,java.lang.Object,java.lang.Object	3
<handle <java.util.Comparator: int lambda$comparingDouble$8dcf42ea$1(java.util.function.ToDoubleFunction,java.lang.Object,java.lang.Object)>>	<java.util.Comparator: int lambda$comparingDouble$8dcf42ea$1(java.util.function.ToDoubleFunction,java.lang.Object,java.lang.Object)>	int	java.util.function.ToDoubleFunction,java.lang.Object,java.lang.Object	3
<handle <java.util.Comparator: int lambda$thenComparing$36697e65$1(java.util.Comparator,java.lang.Object,java.lang.Object)>>	<java.util.Comparator: int lambda$thenComparing$36697e65$1(java.util.Comparator,java.lang.Object,java.lang.Object)>	int	java.util.Comparator,java.lang.Object,java.lang.Object	3
<handle <java.util.Comparator: int lambda$comparingInt$7b0bb60$1(java.util.function.ToIntFunction,java.lang.Object,java.lang.Object)>>	<java.util.Comparator: int lambda$comparingInt$7b0bb60$1(java.util.function.ToIntFunction,java.lang.Object,java.lang.Object)>	int	java.util.function.ToIntFunction,java.lang.Object,java.lang.Object	3
<handle <sun.net.www.protocol.http.HttpURLConnection: java.lang.String lambda$getNetProperty$0(java.lang.String)>>	<sun.net.www.protocol.http.HttpURLConnection: java.lang.String lambda$getNetProperty$0(java.lang.String)>	java.lang.String	java.lang.String	1
<handle <java.util.stream.SpinedBuffer$OfDouble: void accept(double)>>	<java.util.stream.SpinedBuffer$OfDouble: void accept(double)>	void	double	1
<handle <java.util.stream.StreamSpliterators$DoubleWrappingSpliterator: boolean lambda$initPartialTraversalState$0()>>	<java.util.stream.StreamSpliterators$DoubleWrappingSpliterator: boolean lambda$initPartialTraversalState$0()>	boolean		0
<handle <java.util.function.DoubleConsumer: void accept(double)>>	<java.util.function.DoubleConsumer: void accept(double)>	void	double	1
<handle <java.util.stream.SliceOps$3: java.lang.Long[] lambda$opEvaluateParallelLazy$0(int)>>	<java.util.stream.SliceOps$3: java.lang.Long[] lambda$opEvaluateParallelLazy$0(int)>	java.lang.Long[]	int	1
<handle <java.util.function.LongUnaryOperator: long lambda$compose$0(java.util.function.LongUnaryOperator,long)>>	<java.util.function.LongUnaryOperator: long lambda$compose$0(java.util.function.LongUnaryOperator,long)>	long	java.util.function.LongUnaryOperator,long	2
<handle <java.util.function.LongUnaryOperator: long lambda$andThen$1(java.util.function.LongUnaryOperator,long)>>	<java.util.function.LongUnaryOperator: long lambda$andThen$1(java.util.function.LongUnaryOperator,long)>	long	java.util.function.LongUnaryOperator,long	2
<handle <java.util.function.LongUnaryOperator: long lambda$identity$2(long)>>	<java.util.function.LongUnaryOperator: long lambda$identity$2(long)>	long	long	1
<handle <java.util.stream.Sink: void accept(double)>>	<java.util.stream.Sink: void accept(double)>	void	double	1
<handle <java.nio.file.Files: void lambda$asUncheckedRunnable$0(java.io.Closeable)>>	<java.nio.file.Files: void lambda$asUncheckedRunnable$0(java.io.Closeable)>	void	java.io.Closeable	1
<handle <java.util.Collections$CopiesList: java.lang.Object lambda$stream$0(int)>>	<java.util.Collections$CopiesList: java.lang.Object lambda$stream$0(int)>	java.lang.Object	int	1
<handle <java.util.Collections$CopiesList: java.lang.Object lambda$parallelStream$1(int)>>	<java.util.Collections$CopiesList: java.lang.Object lambda$parallelStream$1(int)>	java.lang.Object	int	1
<handle <sun.nio.ch.ThreadPool: java.lang.Thread lambda$defaultThreadFactory$0(java.lang.Runnable)>>	<sun.nio.ch.ThreadPool: java.lang.Thread lambda$defaultThreadFactory$0(java.lang.Runnable)>	java.lang.Thread	java.lang.Runnable	1
<handle <sun.nio.ch.ThreadPool: java.lang.Thread lambda$defaultThreadFactory$2(java.lang.Runnable)>>	<sun.nio.ch.ThreadPool: java.lang.Thread lambda$defaultThreadFactory$2(java.lang.Runnable)>	java.lang.Thread	java.lang.Runnable	1
<handle <sun.nio.ch.ThreadPool: java.lang.Thread lambda$null$1(java.lang.Runnable)>>	<sun.nio.ch.ThreadPool: java.lang.Thread lambda$null$1(java.lang.Runnable)>	java.lang.Thread	java.lang.Runnable	1
<handle <java.nio.file.FileTreeIterator: void close()>>	<java.nio.file.FileTreeIterator: void close()>	void		0
<handle <java.nio.file.Files: java.nio.file.Path lambda$walk$1(java.nio.file.FileTreeWalker$Event)>>	<java.nio.file.Files: java.nio.file.Path lambda$walk$1(java.nio.file.FileTreeWalker$Event)>	java.nio.file.Path	java.nio.file.FileTreeWalker$Event	1
<handle <java.nio.file.FileTreeIterator: void close()>>	<java.nio.file.FileTreeIterator: void close()>	void		0
<handle <java.nio.file.Files: boolean lambda$find$2(java.util.function.BiPredicate,java.nio.file.FileTreeWalker$Event)>>	<java.nio.file.Files: boolean lambda$find$2(java.util.function.BiPredicate,java.nio.file.FileTreeWalker$Event)>	boolean	java.util.function.BiPredicate,java.nio.file.FileTreeWalker$Event	2
<handle <java.nio.file.Files: java.nio.file.Path lambda$find$3(java.nio.file.FileTreeWalker$Event)>>	<java.nio.file.Files: java.nio.file.Path lambda$find$3(java.nio.file.FileTreeWalker$Event)>	java.nio.file.Path	java.nio.file.FileTreeWalker$Event	1
<handle <java.util.function.BiPredicate: boolean lambda$and$0(java.util.function.BiPredicate,java.lang.Object,java.lang.Object)>>	<java.util.function.BiPredicate: boolean lambda$and$0(java.util.function.BiPredicate,java.lang.Object,java.lang.Object)>	boolean	java.util.function.BiPredicate,java.lang.Object,java.lang.Object	3
<handle <java.util.function.BiPredicate: boolean lambda$negate$1(java.lang.Object,java.lang.Object)>>	<java.util.function.BiPredicate: boolean lambda$negate$1(java.lang.Object,java.lang.Object)>	boolean	java.lang.Object,java.lang.Object	2
<handle <java.util.function.BiPredicate: boolean lambda$or$2(java.util.function.BiPredicate,java.lang.Object,java.lang.Object)>>	<java.util.function.BiPredicate: boolean lambda$or$2(java.util.function.BiPredicate,java.lang.Object,java.lang.Object)>	boolean	java.util.function.BiPredicate,java.lang.Object,java.lang.Object	3
<handle <java.util.function.Consumer: void accept(java.lang.Object)>>	<java.util.function.Consumer: void accept(java.lang.Object)>	void	java.lang.Object	1
<handle <java.util.function.Consumer: void accept(java.lang.Object)>>	<java.util.function.Consumer: void accept(java.lang.Object)>	void	java.lang.Object	1
<handle <sun.misc.ObjectInputFilter$Config: sun.misc.ObjectInputFilter lambda$static$0()>>	<sun.misc.ObjectInputFilter$Config: sun.misc.ObjectInputFilter lambda$static$0()>	sun.misc.ObjectInputFilter		0
<handle <java.time.temporal.TemporalQueries: java.time.ZoneId lambda$static$0(java.time.temporal.TemporalAccessor)>>	<java.time.temporal.TemporalQueries: java.time.ZoneId lambda$static$0(java.time.temporal.TemporalAccessor)>	java.time.ZoneId	java.time.temporal.TemporalAccessor	1
<handle <java.time.temporal.TemporalQueries: java.time.chrono.Chronology lambda$static$1(java.time.temporal.TemporalAccessor)>>	<java.time.temporal.TemporalQueries: java.time.chrono.Chronology lambda$static$1(java.time.temporal.TemporalAccessor)>	java.time.chrono.Chronology	java.time.temporal.TemporalAccessor	1
<handle <java.time.temporal.TemporalQueries: java.time.temporal.TemporalUnit lambda$static$2(java.time.temporal.TemporalAccessor)>>	<java.time.temporal.TemporalQueries: java.time.temporal.TemporalUnit lambda$static$2(java.time.temporal.TemporalAccessor)>	java.time.temporal.TemporalUnit	java.time.temporal.TemporalAccessor	1
<handle <java.time.temporal.TemporalQueries: java.time.ZoneOffset lambda$static$3(java.time.temporal.TemporalAccessor)>>	<java.time.temporal.TemporalQueries: java.time.ZoneOffset lambda$static$3(java.time.temporal.TemporalAccessor)>	java.time.ZoneOffset	java.time.temporal.TemporalAccessor	1
<handle <java.time.temporal.TemporalQueries: java.time.ZoneId lambda$static$4(java.time.temporal.TemporalAccessor)>>	<java.time.temporal.TemporalQueries: java.time.ZoneId lambda$static$4(java.time.temporal.TemporalAccessor)>	java.time.ZoneId	java.time.temporal.TemporalAccessor	1
<handle <java.time.temporal.TemporalQueries: java.time.LocalDate lambda$static$5(java.time.temporal.TemporalAccessor)>>	<java.time.temporal.TemporalQueries: java.time.LocalDate lambda$static$5(java.time.temporal.TemporalAccessor)>	java.time.LocalDate	java.time.temporal.TemporalAccessor	1
<handle <java.time.temporal.TemporalQueries: java.time.LocalTime lambda$static$6(java.time.temporal.TemporalAccessor)>>	<java.time.temporal.TemporalQueries: java.time.LocalTime lambda$static$6(java.time.temporal.TemporalAccessor)>	java.time.LocalTime	java.time.temporal.TemporalAccessor	1
<handle <java.util.stream.SpinedBuffer$OfLong: void accept(long)>>	<java.util.stream.SpinedBuffer$OfLong: void accept(long)>	void	long	1
<handle <java.util.stream.StreamSpliterators$LongWrappingSpliterator: boolean lambda$initPartialTraversalState$0()>>	<java.util.stream.StreamSpliterators$LongWrappingSpliterator: boolean lambda$initPartialTraversalState$0()>	boolean		0
<handle <java.util.function.LongConsumer: void accept(long)>>	<java.util.function.LongConsumer: void accept(long)>	void	long	1
<handle <java.util.function.DoublePredicate: boolean lambda$and$0(java.util.function.DoublePredicate,double)>>	<java.util.function.DoublePredicate: boolean lambda$and$0(java.util.function.DoublePredicate,double)>	boolean	java.util.function.DoublePredicate,double	2
<handle <java.util.function.DoublePredicate: boolean lambda$negate$1(double)>>	<java.util.function.DoublePredicate: boolean lambda$negate$1(double)>	boolean	double	1
<handle <java.util.function.DoublePredicate: boolean lambda$or$2(java.util.function.DoublePredicate,double)>>	<java.util.function.DoublePredicate: boolean lambda$or$2(java.util.function.DoublePredicate,double)>	boolean	java.util.function.DoublePredicate,double	2
<handle <java.util.TreeMap$EntrySpliterator: int lambda$getComparator$d5a01062$1(java.util.Map$Entry,java.util.Map$Entry)>>	<java.util.TreeMap$EntrySpliterator: int lambda$getComparator$d5a01062$1(java.util.Map$Entry,java.util.Map$Entry)>	int	java.util.Map$Entry,java.util.Map$Entry	2
<handle <java.util.TreeMap$EntrySpliterator: int lambda$getComparator$d5a01062$1(java.util.Map$Entry,java.util.Map$Entry)>>	<java.util.TreeMap$EntrySpliterator: int lambda$getComparator$d5a01062$1(java.util.Map$Entry,java.util.Map$Entry)>	int	java.util.Map$Entry,java.util.Map$Entry	2
<handle <java.lang.UNIXProcess: java.lang.Void lambda$new$2(int[])>>	<java.lang.UNIXProcess: java.lang.Void lambda$new$2(int[])>	java.lang.Void	int[]	1
<handle <java.lang.UNIXProcess: void lambda$initStreams$3()>>	<java.lang.UNIXProcess: void lambda$initStreams$3()>	void		0
<handle <java.lang.UNIXProcess: void lambda$initStreams$4()>>	<java.lang.UNIXProcess: void lambda$initStreams$4()>	void		0
<handle <java.lang.UNIXProcess: void lambda$initStreams$5()>>	<java.lang.UNIXProcess: void lambda$initStreams$5()>	void		0
<handle <java.lang.UNIXProcess: java.lang.Thread lambda$null$0(java.lang.ThreadGroup,java.lang.Runnable)>>	<java.lang.UNIXProcess: java.lang.Thread lambda$null$0(java.lang.ThreadGroup,java.lang.Runnable)>	java.lang.Thread	java.lang.ThreadGroup,java.lang.Runnable	2
<handle <java.lang.UNIXProcess: java.util.concurrent.Executor lambda$static$1()>>	<java.lang.UNIXProcess: java.util.concurrent.Executor lambda$static$1()>	java.util.concurrent.Executor		0
<handle <java.util.function.IntConsumer: void lambda$andThen$0(java.util.function.IntConsumer,int)>>	<java.util.function.IntConsumer: void lambda$andThen$0(java.util.function.IntConsumer,int)>	void	java.util.function.IntConsumer,int	2
<handle <java.util.stream.Node$OfDouble: void lambda$truncate$0(double)>>	<java.util.stream.Node$OfDouble: void lambda$truncate$0(double)>	void	double	1
<handle <java.util.stream.SpinedBuffer$OfInt: void accept(int)>>	<java.util.stream.SpinedBuffer$OfInt: void accept(int)>	void	int	1
<handle <java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean lambda$initPartialTraversalState$0()>>	<java.util.stream.StreamSpliterators$IntWrappingSpliterator: boolean lambda$initPartialTraversalState$0()>	boolean		0
<handle <java.util.function.IntConsumer: void accept(int)>>	<java.util.function.IntConsumer: void accept(int)>	void	int	1
<handle <java.util.List: boolean add(java.lang.Object)>>	<java.util.List: boolean add(java.lang.Object)>	boolean	java.lang.Object	1
<handle <java.lang.CharSequence: java.util.Spliterator$OfInt lambda$chars$0()>>	<java.lang.CharSequence: java.util.Spliterator$OfInt lambda$chars$0()>	java.util.Spliterator$OfInt		0
<handle <java.lang.CharSequence: java.util.Spliterator$OfInt lambda$codePoints$1()>>	<java.lang.CharSequence: java.util.Spliterator$OfInt lambda$codePoints$1()>	java.util.Spliterator$OfInt		0
<handle <java.time.LocalTime: java.time.LocalTime from(java.time.temporal.TemporalAccessor)>>	<java.time.LocalTime: java.time.LocalTime from(java.time.temporal.TemporalAccessor)>	java.time.LocalTime	java.time.temporal.TemporalAccessor	1
<handle <java.util.stream.StreamSpliterators$DistinctSpliterator: void lambda$forEachRemaining$0(java.util.function.Consumer,java.lang.Object)>>	<java.util.stream.StreamSpliterators$DistinctSpliterator: void lambda$forEachRemaining$0(java.util.function.Consumer,java.lang.Object)>	void	java.util.function.Consumer,java.lang.Object	2
<handle <java.util.stream.Node: void lambda$truncate$0(java.lang.Object)>>	<java.util.stream.Node: void lambda$truncate$0(java.lang.Object)>	void	java.lang.Object	1
<handle <sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$0(java.lang.String,java.lang.Class)>>	<sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$0(java.lang.String,java.lang.Class)>	sun.misc.ObjectInputFilter$Status	java.lang.String,java.lang.Class	2
<handle <sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$1(java.lang.String,java.lang.Class)>>	<sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$1(java.lang.String,java.lang.Class)>	sun.misc.ObjectInputFilter$Status	java.lang.String,java.lang.Class	2
<handle <sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$2(java.lang.String,java.lang.Class)>>	<sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$2(java.lang.String,java.lang.Class)>	sun.misc.ObjectInputFilter$Status	java.lang.String,java.lang.Class	2
<handle <sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$3(java.lang.String,java.lang.Class)>>	<sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$3(java.lang.String,java.lang.Class)>	sun.misc.ObjectInputFilter$Status	java.lang.String,java.lang.Class	2
<handle <sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$4(java.lang.String,java.lang.Class)>>	<sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$4(java.lang.String,java.lang.Class)>	sun.misc.ObjectInputFilter$Status	java.lang.String,java.lang.Class	2
<handle <sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$5(java.lang.String,java.lang.Class)>>	<sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$5(java.lang.String,java.lang.Class)>	sun.misc.ObjectInputFilter$Status	java.lang.String,java.lang.Class	2
<handle <sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$6(java.lang.String,java.lang.Class)>>	<sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$6(java.lang.String,java.lang.Class)>	sun.misc.ObjectInputFilter$Status	java.lang.String,java.lang.Class	2
<handle <sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$7(java.lang.String,java.lang.Class)>>	<sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$new$7(java.lang.String,java.lang.Class)>	sun.misc.ObjectInputFilter$Status	java.lang.String,java.lang.Class	2
<handle <sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$checkInput$8(java.lang.Class,java.util.function.Function)>>	<sun.misc.ObjectInputFilter$Config$Global: sun.misc.ObjectInputFilter$Status lambda$checkInput$8(java.lang.Class,java.util.function.Function)>	sun.misc.ObjectInputFilter$Status	java.lang.Class,java.util.function.Function	2
<handle <sun.misc.ObjectInputFilter$Config$Global: boolean lambda$checkInput$9(sun.misc.ObjectInputFilter$Status)>>	<sun.misc.ObjectInputFilter$Config$Global: boolean lambda$checkInput$9(sun.misc.ObjectInputFilter$Status)>	boolean	sun.misc.ObjectInputFilter$Status	1
<handle <java.util.LinkedHashSet: void <init>()>>	<java.util.LinkedHashSet: void <init>()>	void		0
<handle <java.util.HashSet: boolean add(java.lang.Object)>>	<java.util.HashSet: boolean add(java.lang.Object)>	boolean	java.lang.Object	1
<handle <java.util.AbstractCollection: boolean addAll(java.util.Collection)>>	<java.util.AbstractCollection: boolean addAll(java.util.Collection)>	boolean	java.util.Collection	1
<handle <java.util.stream.DistinctOps$1: void lambda$opEvaluateParallel$0(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ConcurrentHashMap,java.lang.Object)>>	<java.util.stream.DistinctOps$1: void lambda$opEvaluateParallel$0(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ConcurrentHashMap,java.lang.Object)>	void	java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.ConcurrentHashMap,java.lang.Object	3
<handle <java.util.function.Predicate: boolean lambda$and$0(java.util.function.Predicate,java.lang.Object)>>	<java.util.function.Predicate: boolean lambda$and$0(java.util.function.Predicate,java.lang.Object)>	boolean	java.util.function.Predicate,java.lang.Object	2
<handle <java.util.function.Predicate: boolean lambda$negate$1(java.lang.Object)>>	<java.util.function.Predicate: boolean lambda$negate$1(java.lang.Object)>	boolean	java.lang.Object	1
<handle <java.util.function.Predicate: boolean lambda$or$2(java.util.function.Predicate,java.lang.Object)>>	<java.util.function.Predicate: boolean lambda$or$2(java.util.function.Predicate,java.lang.Object)>	boolean	java.util.function.Predicate,java.lang.Object	2
<handle <java.util.Objects: boolean isNull(java.lang.Object)>>	<java.util.Objects: boolean isNull(java.lang.Object)>	boolean	java.lang.Object	1
<handle <java.util.function.Predicate: boolean lambda$isEqual$3(java.lang.Object,java.lang.Object)>>	<java.util.function.Predicate: boolean lambda$isEqual$3(java.lang.Object,java.lang.Object)>	boolean	java.lang.Object,java.lang.Object	2
<handle <java.time.OffsetDateTime: int compareInstant(java.time.OffsetDateTime,java.time.OffsetDateTime)>>	<java.time.OffsetDateTime: int compareInstant(java.time.OffsetDateTime,java.time.OffsetDateTime)>	int	java.time.OffsetDateTime,java.time.OffsetDateTime	2
<handle <java.time.OffsetDateTime: java.time.OffsetDateTime from(java.time.temporal.TemporalAccessor)>>	<java.time.OffsetDateTime: java.time.OffsetDateTime from(java.time.temporal.TemporalAccessor)>	java.time.OffsetDateTime	java.time.temporal.TemporalAccessor	1
<handle <java.util.function.Consumer: void accept(java.lang.Object)>>	<java.util.function.Consumer: void accept(java.lang.Object)>	void	java.lang.Object	1
<handle <java.util.function.Consumer: void accept(java.lang.Object)>>	<java.util.function.Consumer: void accept(java.lang.Object)>	void	java.lang.Object	1
<handle <java.time.chrono.HijrahChronology: java.util.Properties lambda$readConfigProperties$0(java.lang.String)>>	<java.time.chrono.HijrahChronology: java.util.Properties lambda$readConfigProperties$0(java.lang.String)>	java.util.Properties	java.lang.String	1
<handle <java.util.function.Consumer: void lambda$andThen$0(java.util.function.Consumer,java.lang.Object)>>	<java.util.function.Consumer: void lambda$andThen$0(java.util.function.Consumer,java.lang.Object)>	void	java.util.function.Consumer,java.lang.Object	2
<handle <java.lang.annotation.Annotation: java.lang.Class annotationType()>>	<java.lang.annotation.Annotation: java.lang.Class annotationType()>	java.lang.Class		0
<handle <java.lang.reflect.AnnotatedElement: java.lang.annotation.Annotation lambda$getDeclaredAnnotationsByType$0(java.lang.annotation.Annotation,java.lang.annotation.Annotation)>>	<java.lang.reflect.AnnotatedElement: java.lang.annotation.Annotation lambda$getDeclaredAnnotationsByType$0(java.lang.annotation.Annotation,java.lang.annotation.Annotation)>	java.lang.annotation.Annotation	java.lang.annotation.Annotation,java.lang.annotation.Annotation	2
<handle <java.util.LinkedHashMap: void <init>()>>	<java.util.LinkedHashMap: void <init>()>	void		0
<handle <java.time.chrono.AbstractChronology: int lambda$static$b5a61975$1(java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime)>>	<java.time.chrono.AbstractChronology: int lambda$static$b5a61975$1(java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime)>	int	java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime	2
<handle <java.time.chrono.AbstractChronology: int lambda$static$7f2d2d5b$1(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)>>	<java.time.chrono.AbstractChronology: int lambda$static$7f2d2d5b$1(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)>	int	java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate	2
<handle <java.time.chrono.AbstractChronology: int lambda$static$2241c452$1(java.time.chrono.ChronoZonedDateTime,java.time.chrono.ChronoZonedDateTime)>>	<java.time.chrono.AbstractChronology: int lambda$static$2241c452$1(java.time.chrono.ChronoZonedDateTime,java.time.chrono.ChronoZonedDateTime)>	int	java.time.chrono.ChronoZonedDateTime,java.time.chrono.ChronoZonedDateTime	2
<handle <java.time.chrono.AbstractChronology: int lambda$static$7f2d2d5b$1(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)>>	<java.time.chrono.AbstractChronology: int lambda$static$7f2d2d5b$1(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)>	int	java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate	2
<handle <java.time.chrono.AbstractChronology: int lambda$static$b5a61975$1(java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime)>>	<java.time.chrono.AbstractChronology: int lambda$static$b5a61975$1(java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime)>	int	java.time.chrono.ChronoLocalDateTime,java.time.chrono.ChronoLocalDateTime	2
<handle <java.time.chrono.AbstractChronology: int lambda$static$2241c452$1(java.time.chrono.ChronoZonedDateTime,java.time.chrono.ChronoZonedDateTime)>>	<java.time.chrono.AbstractChronology: int lambda$static$2241c452$1(java.time.chrono.ChronoZonedDateTime,java.time.chrono.ChronoZonedDateTime)>	int	java.time.chrono.ChronoZonedDateTime,java.time.chrono.ChronoZonedDateTime	2
<handle <java.time.MonthDay: java.time.MonthDay from(java.time.temporal.TemporalAccessor)>>	<java.time.MonthDay: java.time.MonthDay from(java.time.temporal.TemporalAccessor)>	java.time.MonthDay	java.time.temporal.TemporalAccessor	1
<handle <sun.security.x509.X509CertImpl: java.lang.String lambda$getFingerprint$0(java.lang.String)>>	<sun.security.x509.X509CertImpl: java.lang.String lambda$getFingerprint$0(java.lang.String)>	java.lang.String	java.lang.String	1
<handle <java.util.stream.Nodes$CollectorTask$OfRef: java.util.stream.Node$Builder lambda$new$0(java.util.function.IntFunction,long)>>	<java.util.stream.Nodes$CollectorTask$OfRef: java.util.stream.Node$Builder lambda$new$0(java.util.function.IntFunction,long)>	java.util.stream.Node$Builder	java.util.function.IntFunction,long	2
<handle <java.util.stream.Nodes$ConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>>	<java.util.stream.Nodes$ConcNode: void <init>(java.util.stream.Node,java.util.stream.Node)>	void	java.util.stream.Node,java.util.stream.Node	2
<handle <java.time.LocalDate: java.time.LocalDate from(java.time.temporal.TemporalAccessor)>>	<java.time.LocalDate: java.time.LocalDate from(java.time.temporal.TemporalAccessor)>	java.time.LocalDate	java.time.temporal.TemporalAccessor	1
<handle <java.util.stream.Collectors: java.lang.Object lambda$throwingMerger$0(java.lang.Object,java.lang.Object)>>	<java.util.stream.Collectors: java.lang.Object lambda$throwingMerger$0(java.lang.Object,java.lang.Object)>	java.lang.Object	java.lang.Object,java.lang.Object	2
<handle <java.util.stream.Collectors: java.lang.Object lambda$castingIdentity$1(java.lang.Object)>>	<java.util.stream.Collectors: java.lang.Object lambda$castingIdentity$1(java.lang.Object)>	java.lang.Object	java.lang.Object	1
<handle <java.util.Collection: boolean add(java.lang.Object)>>	<java.util.Collection: boolean add(java.lang.Object)>	boolean	java.lang.Object	1
<handle <java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>>	<java.util.stream.Collectors: java.util.Collection lambda$toCollection$2(java.util.Collection,java.util.Collection)>	java.util.Collection	java.util.Collection,java.util.Collection	2
<handle <java.util.ArrayList: void <init>()>>	<java.util.ArrayList: void <init>()>	void		0
<handle <java.util.List: boolean add(java.lang.Object)>>	<java.util.List: boolean add(java.lang.Object)>	boolean	java.lang.Object	1
<handle <java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>>	<java.util.stream.Collectors: java.util.List lambda$toList$3(java.util.List,java.util.List)>	java.util.List	java.util.List,java.util.List	2
<handle <java.util.HashSet: void <init>()>>	<java.util.HashSet: void <init>()>	void		0
<handle <java.util.Set: boolean add(java.lang.Object)>>	<java.util.Set: boolean add(java.lang.Object)>	boolean	java.lang.Object	1
<handle <java.util.stream.Collectors: java.util.Set lambda$toSet$4(java.util.Set,java.util.Set)>>	<java.util.stream.Collectors: java.util.Set lambda$toSet$4(java.util.Set,java.util.Set)>	java.util.Set	java.util.Set,java.util.Set	2
<handle <java.lang.StringBuilder: void <init>()>>	<java.lang.StringBuilder: void <init>()>	void		0
<handle <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>>	<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>	java.lang.StringBuilder	java.lang.CharSequence	1
<handle <java.util.stream.Collectors: java.lang.StringBuilder lambda$joining$5(java.lang.StringBuilder,java.lang.StringBuilder)>>	<java.util.stream.Collectors: java.lang.StringBuilder lambda$joining$5(java.lang.StringBuilder,java.lang.StringBuilder)>	java.lang.StringBuilder	java.lang.StringBuilder,java.lang.StringBuilder	2
<handle <java.lang.StringBuilder: java.lang.String toString()>>	<java.lang.StringBuilder: java.lang.String toString()>	java.lang.String		0
<handle <java.util.stream.Collectors: java.util.StringJoiner lambda$joining$6(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>>	<java.util.stream.Collectors: java.util.StringJoiner lambda$joining$6(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>	java.util.StringJoiner	java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence	3
<handle <java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>>	<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>	java.util.StringJoiner	java.lang.CharSequence	1
<handle <java.util.StringJoiner: java.util.StringJoiner merge(java.util.StringJoiner)>>	<java.util.StringJoiner: java.util.StringJoiner merge(java.util.StringJoiner)>	java.util.StringJoiner	java.util.StringJoiner	1
<handle <java.util.StringJoiner: java.lang.String toString()>>	<java.util.StringJoiner: java.lang.String toString()>	java.lang.String		0
<handle <java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>>	<java.util.stream.Collectors: java.util.Map lambda$mapMerger$7(java.util.function.BinaryOperator,java.util.Map,java.util.Map)>	java.util.Map	java.util.function.BinaryOperator,java.util.Map,java.util.Map	3
<handle <java.util.stream.Collectors: void lambda$mapping$8(java.util.function.BiConsumer,java.util.function.Function,java.lang.Object,java.lang.Object)>>	<java.util.stream.Collectors: void lambda$mapping$8(java.util.function.BiConsumer,java.util.function.Function,java.lang.Object,java.lang.Object)>	void	java.util.function.BiConsumer,java.util.function.Function,java.lang.Object,java.lang.Object	4
<handle <java.util.stream.Collectors: java.lang.Long lambda$counting$9(java.lang.Object)>>	<java.util.stream.Collectors: java.lang.Long lambda$counting$9(java.lang.Object)>	java.lang.Long	java.lang.Object	1
<handle <java.lang.Long: long sum(long,long)>>	<java.lang.Long: long sum(long,long)>	long	long,long	2
<handle <java.util.stream.Collectors: int[] lambda$summingInt$10()>>	<java.util.stream.Collectors: int[] lambda$summingInt$10()>	int[]		0
<handle <java.util.stream.Collectors: void lambda$summingInt$11(java.util.function.ToIntFunction,int[],java.lang.Object)>>	<java.util.stream.Collectors: void lambda$summingInt$11(java.util.function.ToIntFunction,int[],java.lang.Object)>	void	java.util.function.ToIntFunction,int[],java.lang.Object	3
<handle <java.util.stream.Collectors: int[] lambda$summingInt$12(int[],int[])>>	<java.util.stream.Collectors: int[] lambda$summingInt$12(int[],int[])>	int[]	int[],int[]	2
<handle <java.util.stream.Collectors: java.lang.Integer lambda$summingInt$13(int[])>>	<java.util.stream.Collectors: java.lang.Integer lambda$summingInt$13(int[])>	java.lang.Integer	int[]	1
<handle <java.util.stream.Collectors: long[] lambda$summingLong$14()>>	<java.util.stream.Collectors: long[] lambda$summingLong$14()>	long[]		0
<handle <java.util.stream.Collectors: void lambda$summingLong$15(java.util.function.ToLongFunction,long[],java.lang.Object)>>	<java.util.stream.Collectors: void lambda$summingLong$15(java.util.function.ToLongFunction,long[],java.lang.Object)>	void	java.util.function.ToLongFunction,long[],java.lang.Object	3
<handle <java.util.stream.Collectors: long[] lambda$summingLong$16(long[],long[])>>	<java.util.stream.Collectors: long[] lambda$summingLong$16(long[],long[])>	long[]	long[],long[]	2
<handle <java.util.stream.Collectors: java.lang.Long lambda$summingLong$17(long[])>>	<java.util.stream.Collectors: java.lang.Long lambda$summingLong$17(long[])>	java.lang.Long	long[]	1
<handle <java.util.stream.Collectors: double[] lambda$summingDouble$18()>>	<java.util.stream.Collectors: double[] lambda$summingDouble$18()>	double[]		0
<handle <java.util.stream.Collectors: void lambda$summingDouble$19(java.util.function.ToDoubleFunction,double[],java.lang.Object)>>	<java.util.stream.Collectors: void lambda$summingDouble$19(java.util.function.ToDoubleFunction,double[],java.lang.Object)>	void	java.util.function.ToDoubleFunction,double[],java.lang.Object	3
<handle <java.util.stream.Collectors: double[] lambda$summingDouble$20(double[],double[])>>	<java.util.stream.Collectors: double[] lambda$summingDouble$20(double[],double[])>	double[]	double[],double[]	2
<handle <java.util.stream.Collectors: java.lang.Double lambda$summingDouble$21(double[])>>	<java.util.stream.Collectors: java.lang.Double lambda$summingDouble$21(double[])>	java.lang.Double	double[]	1
<handle <java.util.stream.Collectors: long[] lambda$averagingInt$22()>>	<java.util.stream.Collectors: long[] lambda$averagingInt$22()>	long[]		0
<handle <java.util.stream.Collectors: void lambda$averagingInt$23(java.util.function.ToIntFunction,long[],java.lang.Object)>>	<java.util.stream.Collectors: void lambda$averagingInt$23(java.util.function.ToIntFunction,long[],java.lang.Object)>	void	java.util.function.ToIntFunction,long[],java.lang.Object	3
<handle <java.util.stream.Collectors: long[] lambda$averagingInt$24(long[],long[])>>	<java.util.stream.Collectors: long[] lambda$averagingInt$24(long[],long[])>	long[]	long[],long[]	2
<handle <java.util.stream.Collectors: java.lang.Double lambda$averagingInt$25(long[])>>	<java.util.stream.Collectors: java.lang.Double lambda$averagingInt$25(long[])>	java.lang.Double	long[]	1
<handle <java.util.stream.Collectors: long[] lambda$averagingLong$26()>>	<java.util.stream.Collectors: long[] lambda$averagingLong$26()>	long[]		0
<handle <java.util.stream.Collectors: void lambda$averagingLong$27(java.util.function.ToLongFunction,long[],java.lang.Object)>>	<java.util.stream.Collectors: void lambda$averagingLong$27(java.util.function.ToLongFunction,long[],java.lang.Object)>	void	java.util.function.ToLongFunction,long[],java.lang.Object	3
<handle <java.util.stream.Collectors: long[] lambda$averagingLong$28(long[],long[])>>	<java.util.stream.Collectors: long[] lambda$averagingLong$28(long[],long[])>	long[]	long[],long[]	2
<handle <java.util.stream.Collectors: java.lang.Double lambda$averagingLong$29(long[])>>	<java.util.stream.Collectors: java.lang.Double lambda$averagingLong$29(long[])>	java.lang.Double	long[]	1
<handle <java.util.stream.Collectors: double[] lambda$averagingDouble$30()>>	<java.util.stream.Collectors: double[] lambda$averagingDouble$30()>	double[]		0
<handle <java.util.stream.Collectors: void lambda$averagingDouble$31(java.util.function.ToDoubleFunction,double[],java.lang.Object)>>	<java.util.stream.Collectors: void lambda$averagingDouble$31(java.util.function.ToDoubleFunction,double[],java.lang.Object)>	void	java.util.function.ToDoubleFunction,double[],java.lang.Object	3
<handle <java.util.stream.Collectors: double[] lambda$averagingDouble$32(double[],double[])>>	<java.util.stream.Collectors: double[] lambda$averagingDouble$32(double[],double[])>	double[]	double[],double[]	2
<handle <java.util.stream.Collectors: java.lang.Double lambda$averagingDouble$33(double[])>>	<java.util.stream.Collectors: java.lang.Double lambda$averagingDouble$33(double[])>	java.lang.Double	double[]	1
<handle <java.util.stream.Collectors: void lambda$reducing$34(java.util.function.BinaryOperator,java.lang.Object[],java.lang.Object)>>	<java.util.stream.Collectors: void lambda$reducing$34(java.util.function.BinaryOperator,java.lang.Object[],java.lang.Object)>	void	java.util.function.BinaryOperator,java.lang.Object[],java.lang.Object	3
<handle <java.util.stream.Collectors: java.lang.Object[] lambda$reducing$35(java.util.function.BinaryOperator,java.lang.Object[],java.lang.Object[])>>	<java.util.stream.Collectors: java.lang.Object[] lambda$reducing$35(java.util.function.BinaryOperator,java.lang.Object[],java.lang.Object[])>	java.lang.Object[]	java.util.function.BinaryOperator,java.lang.Object[],java.lang.Object[]	3
<handle <java.util.stream.Collectors: java.lang.Object lambda$reducing$36(java.lang.Object[])>>	<java.util.stream.Collectors: java.lang.Object lambda$reducing$36(java.lang.Object[])>	java.lang.Object	java.lang.Object[]	1
<handle <java.util.stream.Collectors: java.lang.Object[] lambda$boxSupplier$37(java.lang.Object)>>	<java.util.stream.Collectors: java.lang.Object[] lambda$boxSupplier$37(java.lang.Object)>	java.lang.Object[]	java.lang.Object	1
<handle <java.util.stream.Collectors: java.util.stream.Collectors$1OptionalBox lambda$reducing$38(java.util.function.BinaryOperator)>>	<java.util.stream.Collectors: java.util.stream.Collectors$1OptionalBox lambda$reducing$38(java.util.function.BinaryOperator)>	java.util.stream.Collectors$1OptionalBox	java.util.function.BinaryOperator	1
<handle <java.util.stream.Collectors$1OptionalBox: void accept(java.lang.Object)>>	<java.util.stream.Collectors$1OptionalBox: void accept(java.lang.Object)>	void	java.lang.Object	1
<handle <java.util.stream.Collectors: java.util.stream.Collectors$1OptionalBox lambda$reducing$39(java.util.stream.Collectors$1OptionalBox,java.util.stream.Collectors$1OptionalBox)>>	<java.util.stream.Collectors: java.util.stream.Collectors$1OptionalBox lambda$reducing$39(java.util.stream.Collectors$1OptionalBox,java.util.stream.Collectors$1OptionalBox)>	java.util.stream.Collectors$1OptionalBox	java.util.stream.Collectors$1OptionalBox,java.util.stream.Collectors$1OptionalBox	2
<handle <java.util.stream.Collectors: java.util.Optional lambda$reducing$40(java.util.stream.Collectors$1OptionalBox)>>	<java.util.stream.Collectors: java.util.Optional lambda$reducing$40(java.util.stream.Collectors$1OptionalBox)>	java.util.Optional	java.util.stream.Collectors$1OptionalBox	1
<handle <java.util.stream.Collectors: void lambda$reducing$41(java.util.function.BinaryOperator,java.util.function.Function,java.lang.Object[],java.lang.Object)>>	<java.util.stream.Collectors: void lambda$reducing$41(java.util.function.BinaryOperator,java.util.function.Function,java.lang.Object[],java.lang.Object)>	void	java.util.function.BinaryOperator,java.util.function.Function,java.lang.Object[],java.lang.Object	4
<handle <java.util.stream.Collectors: java.lang.Object[] lambda$reducing$42(java.util.function.BinaryOperator,java.lang.Object[],java.lang.Object[])>>	<java.util.stream.Collectors: java.lang.Object[] lambda$reducing$42(java.util.function.BinaryOperator,java.lang.Object[],java.lang.Object[])>	java.lang.Object[]	java.util.function.BinaryOperator,java.lang.Object[],java.lang.Object[]	3
<handle <java.util.stream.Collectors: java.lang.Object lambda$reducing$43(java.lang.Object[])>>	<java.util.stream.Collectors: java.lang.Object lambda$reducing$43(java.lang.Object[])>	java.lang.Object	java.lang.Object[]	1
<handle <java.util.HashMap: void <init>()>>	<java.util.HashMap: void <init>()>	void		0
<handle <java.util.stream.Collectors: void lambda$groupingBy$45(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object)>>	<java.util.stream.Collectors: void lambda$groupingBy$45(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object)>	void	java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.Map,java.lang.Object	5
<handle <java.util.stream.Collectors: java.util.Map lambda$groupingBy$47(java.util.function.Function,java.util.Map)>>	<java.util.stream.Collectors: java.util.Map lambda$groupingBy$47(java.util.function.Function,java.util.Map)>	java.util.Map	java.util.function.Function,java.util.Map	2
<handle <java.util.concurrent.ConcurrentHashMap: void <init>()>>	<java.util.concurrent.ConcurrentHashMap: void <init>()>	void		0
<handle <java.util.concurrent.ConcurrentHashMap: void <init>()>>	<java.util.concurrent.ConcurrentHashMap: void <init>()>	void		0
<handle <java.util.stream.Collectors: void lambda$groupingByConcurrent$49(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.concurrent.ConcurrentMap,java.lang.Object)>>	<java.util.stream.Collectors: void lambda$groupingByConcurrent$49(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.concurrent.ConcurrentMap,java.lang.Object)>	void	java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.concurrent.ConcurrentMap,java.lang.Object	5
<handle <java.util.stream.Collectors: void lambda$groupingByConcurrent$51(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.concurrent.ConcurrentMap,java.lang.Object)>>	<java.util.stream.Collectors: void lambda$groupingByConcurrent$51(java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.concurrent.ConcurrentMap,java.lang.Object)>	void	java.util.function.Function,java.util.function.Supplier,java.util.function.BiConsumer,java.util.concurrent.ConcurrentMap,java.lang.Object	5
<handle <java.util.stream.Collectors: java.util.concurrent.ConcurrentMap lambda$groupingByConcurrent$53(java.util.function.Function,java.util.concurrent.ConcurrentMap)>>	<java.util.stream.Collectors: java.util.concurrent.ConcurrentMap lambda$groupingByConcurrent$53(java.util.function.Function,java.util.concurrent.ConcurrentMap)>	java.util.concurrent.ConcurrentMap	java.util.function.Function,java.util.concurrent.ConcurrentMap	2
<handle <java.util.stream.Collectors: void lambda$partitioningBy$54(java.util.function.BiConsumer,java.util.function.Predicate,java.util.stream.Collectors$Partition,java.lang.Object)>>	<java.util.stream.Collectors: void lambda$partitioningBy$54(java.util.function.BiConsumer,java.util.function.Predicate,java.util.stream.Collectors$Partition,java.lang.Object)>	void	java.util.function.BiConsumer,java.util.function.Predicate,java.util.stream.Collectors$Partition,java.lang.Object	4
<handle <java.util.stream.Collectors: java.util.stream.Collectors$Partition lambda$partitioningBy$55(java.util.function.BinaryOperator,java.util.stream.Collectors$Partition,java.util.stream.Collectors$Partition)>>	<java.util.stream.Collectors: java.util.stream.Collectors$Partition lambda$partitioningBy$55(java.util.function.BinaryOperator,java.util.stream.Collectors$Partition,java.util.stream.Collectors$Partition)>	java.util.stream.Collectors$Partition	java.util.function.BinaryOperator,java.util.stream.Collectors$Partition,java.util.stream.Collectors$Partition	3
<handle <java.util.stream.Collectors: java.util.stream.Collectors$Partition lambda$partitioningBy$56(java.util.stream.Collector)>>	<java.util.stream.Collectors: java.util.stream.Collectors$Partition lambda$partitioningBy$56(java.util.stream.Collector)>	java.util.stream.Collectors$Partition	java.util.stream.Collector	1
<handle <java.util.stream.Collectors: java.util.Map lambda$partitioningBy$57(java.util.stream.Collector,java.util.stream.Collectors$Partition)>>	<java.util.stream.Collectors: java.util.Map lambda$partitioningBy$57(java.util.stream.Collector,java.util.stream.Collectors$Partition)>	java.util.Map	java.util.stream.Collector,java.util.stream.Collectors$Partition	2
<handle <java.util.HashMap: void <init>()>>	<java.util.HashMap: void <init>()>	void		0
<handle <java.util.HashMap: void <init>()>>	<java.util.HashMap: void <init>()>	void		0
<handle <java.util.stream.Collectors: void lambda$toMap$58(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.Map,java.lang.Object)>>	<java.util.stream.Collectors: void lambda$toMap$58(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.Map,java.lang.Object)>	void	java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.Map,java.lang.Object	5
<handle <java.util.concurrent.ConcurrentHashMap: void <init>()>>	<java.util.concurrent.ConcurrentHashMap: void <init>()>	void		0
<handle <java.util.concurrent.ConcurrentHashMap: void <init>()>>	<java.util.concurrent.ConcurrentHashMap: void <init>()>	void		0
<handle <java.util.stream.Collectors: void lambda$toConcurrentMap$59(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.concurrent.ConcurrentMap,java.lang.Object)>>	<java.util.stream.Collectors: void lambda$toConcurrentMap$59(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.concurrent.ConcurrentMap,java.lang.Object)>	void	java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.concurrent.ConcurrentMap,java.lang.Object	5
<handle <java.util.IntSummaryStatistics: void <init>()>>	<java.util.IntSummaryStatistics: void <init>()>	void		0
<handle <java.util.stream.Collectors: void lambda$summarizingInt$60(java.util.function.ToIntFunction,java.util.IntSummaryStatistics,java.lang.Object)>>	<java.util.stream.Collectors: void lambda$summarizingInt$60(java.util.function.ToIntFunction,java.util.IntSummaryStatistics,java.lang.Object)>	void	java.util.function.ToIntFunction,java.util.IntSummaryStatistics,java.lang.Object	3
<handle <java.util.stream.Collectors: java.util.IntSummaryStatistics lambda$summarizingInt$61(java.util.IntSummaryStatistics,java.util.IntSummaryStatistics)>>	<java.util.stream.Collectors: java.util.IntSummaryStatistics lambda$summarizingInt$61(java.util.IntSummaryStatistics,java.util.IntSummaryStatistics)>	java.util.IntSummaryStatistics	java.util.IntSummaryStatistics,java.util.IntSummaryStatistics	2
<handle <java.util.LongSummaryStatistics: void <init>()>>	<java.util.LongSummaryStatistics: void <init>()>	void		0
<handle <java.util.stream.Collectors: void lambda$summarizingLong$62(java.util.function.ToLongFunction,java.util.LongSummaryStatistics,java.lang.Object)>>	<java.util.stream.Collectors: void lambda$summarizingLong$62(java.util.function.ToLongFunction,java.util.LongSummaryStatistics,java.lang.Object)>	void	java.util.function.ToLongFunction,java.util.LongSummaryStatistics,java.lang.Object	3
<handle <java.util.stream.Collectors: java.util.LongSummaryStatistics lambda$summarizingLong$63(java.util.LongSummaryStatistics,java.util.LongSummaryStatistics)>>	<java.util.stream.Collectors: java.util.LongSummaryStatistics lambda$summarizingLong$63(java.util.LongSummaryStatistics,java.util.LongSummaryStatistics)>	java.util.LongSummaryStatistics	java.util.LongSummaryStatistics,java.util.LongSummaryStatistics	2
<handle <java.util.DoubleSummaryStatistics: void <init>()>>	<java.util.DoubleSummaryStatistics: void <init>()>	void		0
<handle <java.util.stream.Collectors: void lambda$summarizingDouble$64(java.util.function.ToDoubleFunction,java.util.DoubleSummaryStatistics,java.lang.Object)>>	<java.util.stream.Collectors: void lambda$summarizingDouble$64(java.util.function.ToDoubleFunction,java.util.DoubleSummaryStatistics,java.lang.Object)>	void	java.util.function.ToDoubleFunction,java.util.DoubleSummaryStatistics,java.lang.Object	3
<handle <java.util.stream.Collectors: java.util.DoubleSummaryStatistics lambda$summarizingDouble$65(java.util.DoubleSummaryStatistics,java.util.DoubleSummaryStatistics)>>	<java.util.stream.Collectors: java.util.DoubleSummaryStatistics lambda$summarizingDouble$65(java.util.DoubleSummaryStatistics,java.util.DoubleSummaryStatistics)>	java.util.DoubleSummaryStatistics	java.util.DoubleSummaryStatistics,java.util.DoubleSummaryStatistics	2
<handle <java.util.stream.Collectors: java.lang.Object lambda$null$52(java.util.function.Function,java.lang.Object,java.lang.Object)>>	<java.util.stream.Collectors: java.lang.Object lambda$null$52(java.util.function.Function,java.lang.Object,java.lang.Object)>	java.lang.Object	java.util.function.Function,java.lang.Object,java.lang.Object	3
<handle <java.util.stream.Collectors: java.lang.Object lambda$null$50(java.util.function.Supplier,java.lang.Object)>>	<java.util.stream.Collectors: java.lang.Object lambda$null$50(java.util.function.Supplier,java.lang.Object)>	java.lang.Object	java.util.function.Supplier,java.lang.Object	2
<handle <java.util.stream.Collectors: java.lang.Object lambda$null$48(java.util.function.Supplier,java.lang.Object)>>	<java.util.stream.Collectors: java.lang.Object lambda$null$48(java.util.function.Supplier,java.lang.Object)>	java.lang.Object	java.util.function.Supplier,java.lang.Object	2
<handle <java.util.stream.Collectors: java.lang.Object lambda$null$46(java.util.function.Function,java.lang.Object,java.lang.Object)>>	<java.util.stream.Collectors: java.lang.Object lambda$null$46(java.util.function.Function,java.lang.Object,java.lang.Object)>	java.lang.Object	java.util.function.Function,java.lang.Object,java.lang.Object	3
<handle <java.util.stream.Collectors: java.lang.Object lambda$null$44(java.util.function.Supplier,java.lang.Object)>>	<java.util.stream.Collectors: java.lang.Object lambda$null$44(java.util.function.Supplier,java.lang.Object)>	java.lang.Object	java.util.function.Supplier,java.lang.Object	2
<handle <java.util.concurrent.ConcurrentMap: void lambda$replaceAll$0(java.util.function.BiFunction,java.lang.Object,java.lang.Object)>>	<java.util.concurrent.ConcurrentMap: void lambda$replaceAll$0(java.util.function.BiFunction,java.lang.Object,java.lang.Object)>	void	java.util.function.BiFunction,java.lang.Object,java.lang.Object	3
<handle <java.util.stream.MatchOps: java.util.stream.MatchOps$BooleanTerminalSink lambda$makeRef$0(java.util.stream.MatchOps$MatchKind,java.util.function.Predicate)>>	<java.util.stream.MatchOps: java.util.stream.MatchOps$BooleanTerminalSink lambda$makeRef$0(java.util.stream.MatchOps$MatchKind,java.util.function.Predicate)>	java.util.stream.MatchOps$BooleanTerminalSink	java.util.stream.MatchOps$MatchKind,java.util.function.Predicate	2
<handle <java.util.stream.MatchOps: java.util.stream.MatchOps$BooleanTerminalSink lambda$makeInt$1(java.util.stream.MatchOps$MatchKind,java.util.function.IntPredicate)>>	<java.util.stream.MatchOps: java.util.stream.MatchOps$BooleanTerminalSink lambda$makeInt$1(java.util.stream.MatchOps$MatchKind,java.util.function.IntPredicate)>	java.util.stream.MatchOps$BooleanTerminalSink	java.util.stream.MatchOps$MatchKind,java.util.function.IntPredicate	2
<handle <java.util.stream.MatchOps: java.util.stream.MatchOps$BooleanTerminalSink lambda$makeLong$2(java.util.stream.MatchOps$MatchKind,java.util.function.LongPredicate)>>	<java.util.stream.MatchOps: java.util.stream.MatchOps$BooleanTerminalSink lambda$makeLong$2(java.util.stream.MatchOps$MatchKind,java.util.function.LongPredicate)>	java.util.stream.MatchOps$BooleanTerminalSink	java.util.stream.MatchOps$MatchKind,java.util.function.LongPredicate	2
<handle <java.util.stream.MatchOps: java.util.stream.MatchOps$BooleanTerminalSink lambda$makeDouble$3(java.util.stream.MatchOps$MatchKind,java.util.function.DoublePredicate)>>	<java.util.stream.MatchOps: java.util.stream.MatchOps$BooleanTerminalSink lambda$makeDouble$3(java.util.stream.MatchOps$MatchKind,java.util.function.DoublePredicate)>	java.util.stream.MatchOps$BooleanTerminalSink	java.util.stream.MatchOps$MatchKind,java.util.function.DoublePredicate	2
<handle <java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$ofDateAdjuster$0(java.util.function.UnaryOperator,java.time.temporal.Temporal)>>	<java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$ofDateAdjuster$0(java.util.function.UnaryOperator,java.time.temporal.Temporal)>	java.time.temporal.Temporal	java.util.function.UnaryOperator,java.time.temporal.Temporal	2
<handle <java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$firstDayOfMonth$1(java.time.temporal.Temporal)>>	<java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$firstDayOfMonth$1(java.time.temporal.Temporal)>	java.time.temporal.Temporal	java.time.temporal.Temporal	1
<handle <java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$lastDayOfMonth$2(java.time.temporal.Temporal)>>	<java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$lastDayOfMonth$2(java.time.temporal.Temporal)>	java.time.temporal.Temporal	java.time.temporal.Temporal	1
<handle <java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$firstDayOfNextMonth$3(java.time.temporal.Temporal)>>	<java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$firstDayOfNextMonth$3(java.time.temporal.Temporal)>	java.time.temporal.Temporal	java.time.temporal.Temporal	1
<handle <java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$firstDayOfYear$4(java.time.temporal.Temporal)>>	<java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$firstDayOfYear$4(java.time.temporal.Temporal)>	java.time.temporal.Temporal	java.time.temporal.Temporal	1
<handle <java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$lastDayOfYear$5(java.time.temporal.Temporal)>>	<java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$lastDayOfYear$5(java.time.temporal.Temporal)>	java.time.temporal.Temporal	java.time.temporal.Temporal	1
<handle <java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$firstDayOfNextYear$6(java.time.temporal.Temporal)>>	<java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$firstDayOfNextYear$6(java.time.temporal.Temporal)>	java.time.temporal.Temporal	java.time.temporal.Temporal	1
<handle <java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$dayOfWeekInMonth$7(int,int,java.time.temporal.Temporal)>>	<java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$dayOfWeekInMonth$7(int,int,java.time.temporal.Temporal)>	java.time.temporal.Temporal	int,int,java.time.temporal.Temporal	3
<handle <java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$dayOfWeekInMonth$8(int,int,java.time.temporal.Temporal)>>	<java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$dayOfWeekInMonth$8(int,int,java.time.temporal.Temporal)>	java.time.temporal.Temporal	int,int,java.time.temporal.Temporal	3
<handle <java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$next$9(int,java.time.temporal.Temporal)>>	<java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$next$9(int,java.time.temporal.Temporal)>	java.time.temporal.Temporal	int,java.time.temporal.Temporal	2
<handle <java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$nextOrSame$10(int,java.time.temporal.Temporal)>>	<java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$nextOrSame$10(int,java.time.temporal.Temporal)>	java.time.temporal.Temporal	int,java.time.temporal.Temporal	2
<handle <java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$previous$11(int,java.time.temporal.Temporal)>>	<java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$previous$11(int,java.time.temporal.Temporal)>	java.time.temporal.Temporal	int,java.time.temporal.Temporal	2
<handle <java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$previousOrSame$12(int,java.time.temporal.Temporal)>>	<java.time.temporal.TemporalAdjusters: java.time.temporal.Temporal lambda$previousOrSame$12(int,java.time.temporal.Temporal)>	java.time.temporal.Temporal	int,java.time.temporal.Temporal	2
<handle <java.util.function.IntPredicate: boolean lambda$and$0(java.util.function.IntPredicate,int)>>	<java.util.function.IntPredicate: boolean lambda$and$0(java.util.function.IntPredicate,int)>	boolean	java.util.function.IntPredicate,int	2
<handle <java.util.function.IntPredicate: boolean lambda$negate$1(int)>>	<java.util.function.IntPredicate: boolean lambda$negate$1(int)>	boolean	int	1
<handle <java.util.function.IntPredicate: boolean lambda$or$2(java.util.function.IntPredicate,int)>>	<java.util.function.IntPredicate: boolean lambda$or$2(java.util.function.IntPredicate,int)>	boolean	java.util.function.IntPredicate,int	2
<handle <java.util.Collections$CheckedMap: java.lang.Object lambda$typeCheck$0(java.util.function.BiFunction,java.lang.Object,java.lang.Object)>>	<java.util.Collections$CheckedMap: java.lang.Object lambda$typeCheck$0(java.util.function.BiFunction,java.lang.Object,java.lang.Object)>	java.lang.Object	java.util.function.BiFunction,java.lang.Object,java.lang.Object	3
<handle <java.util.Collections$CheckedMap: java.lang.Object lambda$computeIfAbsent$1(java.util.function.Function,java.lang.Object)>>	<java.util.Collections$CheckedMap: java.lang.Object lambda$computeIfAbsent$1(java.util.function.Function,java.lang.Object)>	java.lang.Object	java.util.function.Function,java.lang.Object	2
<handle <java.util.Collections$CheckedMap: java.lang.Object lambda$merge$2(java.util.function.BiFunction,java.lang.Object,java.lang.Object)>>	<java.util.Collections$CheckedMap: java.lang.Object lambda$merge$2(java.util.function.BiFunction,java.lang.Object,java.lang.Object)>	java.lang.Object	java.util.function.BiFunction,java.lang.Object,java.lang.Object	3
<handle <java.util.stream.Tripwire: java.lang.Boolean lambda$static$0()>>	<java.util.stream.Tripwire: java.lang.Boolean lambda$static$0()>	java.lang.Boolean		0
<handle <java.util.stream.StreamSpliterators$SliceSpliterator$OfLong: void lambda$emptyConsumer$0(long)>>	<java.util.stream.StreamSpliterators$SliceSpliterator$OfLong: void lambda$emptyConsumer$0(long)>	void	long	1
<handle <java.util.stream.IntPipeline$7$1: void lambda$accept$0(int)>>	<java.util.stream.IntPipeline$7$1: void lambda$accept$0(int)>	void	int	1
<handle <java.util.stream.Nodes: java.util.stream.Node$Builder$OfDouble doubleBuilder(long)>>	<java.util.stream.Nodes: java.util.stream.Node$Builder$OfDouble doubleBuilder(long)>	java.util.stream.Node$Builder$OfDouble	long	1
<handle <java.util.stream.Nodes$ConcNode$OfDouble: void <init>(java.util.stream.Node$OfDouble,java.util.stream.Node$OfDouble)>>	<java.util.stream.Nodes$ConcNode$OfDouble: void <init>(java.util.stream.Node$OfDouble,java.util.stream.Node$OfDouble)>	void	java.util.stream.Node$OfDouble,java.util.stream.Node$OfDouble	2
<handle <java.io.ObjectInputStream: void setValidator(java.io.ObjectInputStream,sun.misc.ObjectStreamClassValidator)>>	<java.io.ObjectInputStream: void setValidator(java.io.ObjectInputStream,sun.misc.ObjectStreamClassValidator)>	void	java.io.ObjectInputStream,sun.misc.ObjectStreamClassValidator	2
<handle <java.util.function.DoubleUnaryOperator: double lambda$compose$0(java.util.function.DoubleUnaryOperator,double)>>	<java.util.function.DoubleUnaryOperator: double lambda$compose$0(java.util.function.DoubleUnaryOperator,double)>	double	java.util.function.DoubleUnaryOperator,double	2
<handle <java.util.function.DoubleUnaryOperator: double lambda$andThen$1(java.util.function.DoubleUnaryOperator,double)>>	<java.util.function.DoubleUnaryOperator: double lambda$andThen$1(java.util.function.DoubleUnaryOperator,double)>	double	java.util.function.DoubleUnaryOperator,double	2
<handle <java.util.function.DoubleUnaryOperator: double lambda$identity$2(double)>>	<java.util.function.DoubleUnaryOperator: double lambda$identity$2(double)>	double	double	1
<handle <java.util.stream.SpinedBuffer: void accept(java.lang.Object)>>	<java.util.stream.SpinedBuffer: void accept(java.lang.Object)>	void	java.lang.Object	1
<handle <java.util.stream.StreamSpliterators$WrappingSpliterator: boolean lambda$initPartialTraversalState$0()>>	<java.util.stream.StreamSpliterators$WrappingSpliterator: boolean lambda$initPartialTraversalState$0()>	boolean		0
<handle <java.util.function.Consumer: void accept(java.lang.Object)>>	<java.util.function.Consumer: void accept(java.lang.Object)>	void	java.lang.Object	1
<handle <java.util.Tripwire: java.lang.Boolean lambda$static$0()>>	<java.util.Tripwire: java.lang.Boolean lambda$static$0()>	java.lang.Boolean		0
<handle <java.util.stream.StreamSpliterators$SliceSpliterator$OfDouble: void lambda$emptyConsumer$0(double)>>	<java.util.stream.StreamSpliterators$SliceSpliterator$OfDouble: void lambda$emptyConsumer$0(double)>	void	double	1
<handle <java.util.function.Function: java.lang.Object lambda$compose$0(java.util.function.Function,java.lang.Object)>>	<java.util.function.Function: java.lang.Object lambda$compose$0(java.util.function.Function,java.lang.Object)>	java.lang.Object	java.util.function.Function,java.lang.Object	2
<handle <java.util.function.Function: java.lang.Object lambda$andThen$1(java.util.function.Function,java.lang.Object)>>	<java.util.function.Function: java.lang.Object lambda$andThen$1(java.util.function.Function,java.lang.Object)>	java.lang.Object	java.util.function.Function,java.lang.Object	2
<handle <java.util.function.Function: java.lang.Object lambda$identity$2(java.lang.Object)>>	<java.util.function.Function: java.lang.Object lambda$identity$2(java.lang.Object)>	java.lang.Object	java.lang.Object	1
<handle <java.util.stream.LongPipeline$6$1: void lambda$accept$0(long)>>	<java.util.stream.LongPipeline$6$1: void lambda$accept$0(long)>	void	long	1
<handle <java.util.stream.Sink: void accept(int)>>	<java.util.stream.Sink: void accept(int)>	void	int	1
<handle <java.lang.Integer: java.lang.Integer valueOf(int)>>	<java.lang.Integer: java.lang.Integer valueOf(int)>	java.lang.Integer	int	1
<handle <java.util.stream.IntPipeline: int lambda$distinct$0(java.lang.Integer)>>	<java.util.stream.IntPipeline: int lambda$distinct$0(java.lang.Integer)>	int	java.lang.Integer	1
<handle <java.lang.Integer: int sum(int,int)>>	<java.lang.Integer: int sum(int,int)>	int	int,int	2
<handle <java.lang.Math: int min(int,int)>>	<java.lang.Math: int min(int,int)>	int	int,int	2
<handle <java.lang.Math: int max(int,int)>>	<java.lang.Math: int max(int,int)>	int	int,int	2
<handle <java.util.stream.IntPipeline: long lambda$count$1(int)>>	<java.util.stream.IntPipeline: long lambda$count$1(int)>	long	int	1
<handle <java.util.stream.IntPipeline: long[] lambda$average$2()>>	<java.util.stream.IntPipeline: long[] lambda$average$2()>	long[]		0
<handle <java.util.stream.IntPipeline: void lambda$average$3(long[],int)>>	<java.util.stream.IntPipeline: void lambda$average$3(long[],int)>	void	long[],int	2
<handle <java.util.stream.IntPipeline: void lambda$average$4(long[],long[])>>	<java.util.stream.IntPipeline: void lambda$average$4(long[],long[])>	void	long[],long[]	2
<handle <java.util.IntSummaryStatistics: void <init>()>>	<java.util.IntSummaryStatistics: void <init>()>	void		0
<handle <java.util.IntSummaryStatistics: void accept(int)>>	<java.util.IntSummaryStatistics: void accept(int)>	void	int	1
<handle <java.util.IntSummaryStatistics: void combine(java.util.IntSummaryStatistics)>>	<java.util.IntSummaryStatistics: void combine(java.util.IntSummaryStatistics)>	void	java.util.IntSummaryStatistics	1
<handle <java.util.stream.IntPipeline: java.lang.Object lambda$collect$5(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>>	<java.util.stream.IntPipeline: java.lang.Object lambda$collect$5(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>	java.lang.Object	java.util.function.BiConsumer,java.lang.Object,java.lang.Object	3
<handle <java.util.stream.IntPipeline: java.lang.Integer[] lambda$toArray$6(int)>>	<java.util.stream.IntPipeline: java.lang.Integer[] lambda$toArray$6(int)>	java.lang.Integer[]	int	1
<handle <java.util.function.LongConsumer: void lambda$andThen$0(java.util.function.LongConsumer,long)>>	<java.util.function.LongConsumer: void lambda$andThen$0(java.util.function.LongConsumer,long)>	void	java.util.function.LongConsumer,long	2
<handle <java.lang.UNIXProcess$Platform: java.lang.String lambda$helperPath$0()>>	<java.lang.UNIXProcess$Platform: java.lang.String lambda$helperPath$0()>	java.lang.String		0
<handle <java.lang.UNIXProcess$Platform: java.lang.UNIXProcess$LaunchMechanism lambda$launchMechanism$1()>>	<java.lang.UNIXProcess$Platform: java.lang.UNIXProcess$LaunchMechanism lambda$launchMechanism$1()>	java.lang.UNIXProcess$LaunchMechanism		0
<handle <java.lang.UNIXProcess$Platform: java.lang.String lambda$get$2()>>	<java.lang.UNIXProcess$Platform: java.lang.String lambda$get$2()>	java.lang.String		0
